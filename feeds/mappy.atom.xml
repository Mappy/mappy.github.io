<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mappy Labs</title><link href="/" rel="alternate"></link><link href="/feeds/mappy.atom.xml" rel="self"></link><id>/</id><updated>2015-02-16T00:00:00+01:00</updated><entry><title>Un plugin Leaflet pour le site Mappy (Leaflet-active-area)</title><link href="/leaflet-active-area.html" rel="alternate"></link><updated>2015-02-16T00:00:00+01:00</updated><author><name>Mappy</name></author><id>tag:,2015-02-16:leaflet-active-area.html</id><summary type="html">&lt;h1&gt;Un plugin Leaflet pour le site mappy.com&lt;/h1&gt;
&lt;p&gt;Lors de la mise en place de Leaflet sur mappy.com, (comme présenté dans un &lt;a href="/mappy-com-migre-vers-leaflet.html"&gt;billet précédent&lt;/a&gt;), nous avons eu l'occasion de développer un plugin Leaflet, proposé en open-source.&lt;/p&gt;
&lt;h3&gt;Mise en avant de la carte&lt;/h3&gt;
&lt;p&gt;L’un des objectifs de cette nouvelle version fût de mettre en avant la carte dans l’interface, qui n'occupait qu’une petite partie de l’interface de la version précédente. Ainsi, sur les pages de fiche POI ou sur la feuille de route, la carte occupe tout l’écran, du haut en bas de l’écran.&lt;/p&gt;
&lt;p&gt;Cela est surtout visible sur les grandes résolutions, où chaque bord laisse place à la carte comme le témoignent les captures d’écran suivantes :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Itinéraire" src="images/leaflet-active-area/iti.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fr.mappy.com/itineraire/Paris%2075001%20-%2075116/Vincennes%2094300?opt.vehicle=midcar&amp;amp;opt.cost=time&amp;amp;opt.notoll=0&amp;amp;opt.infotraffic=0&amp;amp;opt.gascost=1.558&amp;amp;opt.gas=petrol&amp;amp;opt.compensation=0&amp;amp;routeidx=0"&gt;Feuille de route d’un itinéraire&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fiche POI" src="images/leaflet-active-area/poi.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fr.mappy.com/poi/51f0bde784aebbc34d4a0cc7"&gt;Fiche POI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comme on peut le voir sur les images ci-dessus, et vu que la carte occupe presque tout l’écran, les informations - marqueurs et polyline - ne sont pas centrées. Le centre de la carte correspond au centre de l’écran, caché derrière les éléments HTML.
Cela est plus visible lorsque l’on rend transparents ces éléments HTML comme le montrent les captures suivantes :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Itinéraire avec fond transparent" src="images/leaflet-active-area/iti-transparent.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fr.mappy.com/itineraire/Paris%2075001%20-%2075116/Vincennes%2094300?opt.vehicle=midcar&amp;amp;opt.cost=time&amp;amp;opt.notoll=0&amp;amp;opt.infotraffic=0&amp;amp;opt.gascost=1.558&amp;amp;opt.gas=petrol&amp;amp;opt.compensation=0&amp;amp;routeidx=0"&gt;Feuille de route d’un itinéraire avec fond transparent&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fiche POI avec fond transparent" src="images/leaflet-active-area/poi-transparent.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fr.mappy.com/poi/51f0bde784aebbc34d4a0cc7"&gt;Fiche POI avec fond transparent&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Les appels à l’API Leaflet (centrage de la carte, centrage de la vue en fonction de marqueurs, d’un itinéraire) vont naturellement avoir pour centre de la carte le centre de l’écran si celle-ci en occupe la quasi-totalité.&lt;/p&gt;
&lt;h3&gt;Le plugin Leaflet-active-area&lt;/h3&gt;
&lt;p&gt;Afin de pouvoir afficher des marqueurs ou un itinéraire de façon excentrée, nous avons développé un plugin Leaflet pour abstraire ce comportement.&lt;/p&gt;
&lt;p&gt;Il s’agit du plugin &lt;a href="https://github.com/Mappy/Leaflet-active-area"&gt;Leaflet-active-area&lt;/a&gt; qui, comme le montre la &lt;a href="http://techblog.mappy.com/Leaflet-active-area/examples/index.html"&gt;page d’exemple&lt;/a&gt;, permet d’appeler les méthodes usuelles de Leaflet telles que setView, setZoom, fitBounds tout en "centrant" la carte à partir d’une autre zone.&lt;/p&gt;
&lt;p&gt;Le principe est de définir une classe CSS, positionnée de façon absolue, qui sera prise en compte comme zone active de la carte. Ainsi, le centre de la carte sera le centre de cette zone et l’ensemble des marqueurs ou tracés y seront placés.&lt;/p&gt;
&lt;h3&gt;Disponible sous license Apache 2.0&lt;/h3&gt;
&lt;p&gt;Il nous a paru évident, utilisant une API open-source utilisée et développée par une énorme communité de développeurs, de proposer ce plugin en open-source. Il est disponible sur &lt;a href="https://github.com/Mappy/Leaflet-active-area"&gt;github&lt;/a&gt; et référencé dans &lt;a href="http://leafletjs.com/plugins.html#other-plugins-and-libraries"&gt;“la page des plugins”&lt;/a&gt; du site leaflet.&lt;/p&gt;
&lt;p&gt;A ce jour, nous avons même reçu la contribution de plusieurs développeurs hors Mappy avec l'ouverture - et l'acceptation - de 4 pull requests, la création puis la résolution de plusieurs issues. N'hésitez pas à contribuer !&lt;/p&gt;</summary><category term="Leaflet"></category><category term="OpenSource"></category><category term="French"></category></entry><entry><title>mappy.com migre vers Leaflet</title><link href="/mappy-com-migre-vers-leaflet.html" rel="alternate"></link><updated>2015-02-04T00:00:00+01:00</updated><author><name>Mappy</name></author><id>tag:,2015-02-04:mappy-com-migre-vers-leaflet.html</id><summary type="html">&lt;h1&gt;Nouvelle version du site, nouvelle cartographie&lt;/h1&gt;
&lt;p&gt;En mai 2014, une nouvelle version du site Mappy a vu le jour :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Version 4" src="images/leaflet/hp-v4.png" /&gt;&lt;/p&gt;
&lt;p&gt;Précédente version (4)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Version 5" src="images/leaflet/hp-v5.png" /&gt;&lt;/p&gt;
&lt;p&gt;Nouvelle version (5)&lt;/p&gt;
&lt;p&gt;Cette version a entraîné bon nombre de refactoring technique (comme un passage à Backbone par exemple) dont le plus impactant fût la décision de remplacer l’API cartographique JavaScript historique par &lt;a href="http://leafletjs.com/"&gt;Leaflet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Leaflet est une API de cartographie JavaScript OpenSource parmi les plus connues et actives. Utilisée par de nombreux sites importants, aussi bien généralistes (Flickr, Foursquare, Pinterest) que spécialistes de la cartographie (Mapbox, OpenStreetMap), elle dispose de plus de 175 contributeurs.&lt;/p&gt;
&lt;h2&gt;La compatibilité de la cartographie Mappy avec Leaflet&lt;/h2&gt;
&lt;p&gt;Notre plateforme cartographique dispose de certaines spécificités par rapport aux standards actuels :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;une projection &lt;a href="http://spatialreference.org/ref/esri/world-gall-stereographic/"&gt;Gall&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;des tuiles de 384 pixels de large (au lieu des 256 généralement utilisés par les autres acteurs cartographique),&lt;/li&gt;
&lt;li&gt;13 niveaux de zoom, avec un facteur 3 entre chaque niveau (au lieu de 20 niveaux et d'un facteur x2).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elles ont été intégrées sous la forme d’un plugin Leaflet, inspiré du plugin &lt;a href="https://www.mapbox.com/developers/api/"&gt;Mapbox&lt;/a&gt;. Ce plugin étend l’API Leaflet et intègre également d’autres méthodes pour effectuer des recherches géographiques, des recherches géographiques inversées (Retrouver une adresse depuis des coordonnées) et enfin des recherches d’itinéraires via les services de Mappy.&lt;/p&gt;
&lt;p&gt;Utilisée aujourd’hui par le site &lt;a href="http://www.mappy.com"&gt;fixe&lt;/a&gt;, le site &lt;a href="http://m.mappy.com"&gt;mobile&lt;/a&gt; et le widget, cette API est également distribuée aux partenaires. Si vous êtes intéressés, je vous invite à consulter &lt;a href="http://corporate.mappy.com/faq/integrez-mappy/"&gt;la page dédiée à intégration de nos services dans vos produits&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Contributions&lt;/h2&gt;
&lt;p&gt;Depuis cette migration à Leaflet, nous avons apporté quelques contributions sous la forme de “&lt;a href="https://github.com/Leaflet/Leaflet/pull/3038"&gt;pull request&lt;/a&gt;” ou de nouveau plugin (&lt;a href="https://github.com/Mappy/Leaflet-active-area"&gt;leaflet-active-area&lt;/a&gt;, un prochain article le présentera en détail).&lt;/p&gt;
&lt;h2&gt;A l’avenir&lt;/h2&gt;
&lt;p&gt;Au final, ce passage à Leaflet ne nous apporte que des avantages et nous avons hâte de proposer d’autres “pull requests” ou plugins.&lt;/p&gt;
&lt;p&gt;Autre avantage à l'utilisation de Leaflet, la migration vers des projections plus standard - un de nos projet 2015 - aura un très faible coût, et aucune migration d'API ne sera nécessaire.&lt;/p&gt;</summary><category term="Leaflet"></category><category term="OpenSource"></category><category term="French"></category><category term="JavaScript"></category></entry><entry><title>PyLR, an OpenLR decoder in python</title><link href="/PyLR,%20an%20OpenLR%20decoder%20in%20python.html" rel="alternate"></link><updated>2014-12-04T00:00:00+01:00</updated><author><name>Mappy</name></author><id>tag:,2014-12-04:PyLR, an OpenLR decoder in python.html</id><summary type="html">&lt;h1&gt;PyLR, an OpenLR decoder in python&lt;/h1&gt;
&lt;p&gt;Here, at Mappy, we have decided to release our implementation of the &lt;a href="http://www.openlr.org"&gt;OpenLR&lt;/a&gt; specification.&lt;/p&gt;
&lt;p&gt;To make a story short, OpenLR is an open source  software project launched by TomTom in september 2009. This is an attempt to provide a location referencing method that works between digital maps of different vendors or versions.&lt;/p&gt;
&lt;p&gt;We use traffic informations from 10 countries in Europe in &lt;a href="http://datex2.easyway-its.eu/content/datex"&gt;DATEX&lt;/a&gt; format, location reference was provided using the &lt;a href="https://en.wikipedia.org/wiki/Traffic_message_channel"&gt;TMC&lt;/a&gt; reference system.
The problem with TMC is that the coverage of the road network is relatively less than optimal. Because TomTom was providing information on a larger portion of the road network (in theory, the whole network could be covered) using its OpenLR scheme, we have decided to drop TMC in favor of OpenLR.&lt;/p&gt;
&lt;p&gt;The basics:&lt;/p&gt;
&lt;p&gt;OpenLR data provide paths or that must be "decoded" on the destination network (also called 'map' in the OpenLR terminology) by computing the shortest path between location reference points and a bunch of values representing the physical properties of the network at these points.&lt;/p&gt;
&lt;p&gt;So, what is PyLR ?&lt;/p&gt;
&lt;p&gt;PyLR is a partial Python implementation of the OpenLR specification largely inspired from the reference implementation in Java (available on the OpenLR site).&lt;/p&gt;
&lt;p&gt;It is partial in the sense that only parser/decoder is provided, encoding et serializing OpenLR data is not supported at the moment.&lt;/p&gt;
&lt;p&gt;While still a work in progress, it is actually used in production here at Mappy.
For information, our implementation fail to decode less than 1% of the collected traffic situations, which correspond mostly to mismatched data with our network database.&lt;/p&gt;
&lt;p&gt;PyLR implement a decoder from the binary/base64 data representation (xml is not handled at the moment). It implements also a decoder that use an abstract representationof the targeted map.&lt;/p&gt;
&lt;p&gt;At the moment, PyLR is not really usable out of the box: you still need to implement a concrete database and a shortest path algorithm for playing with the library.&lt;/p&gt;
&lt;p&gt;As stated before, it is a work in progress, we have plan to provide more tools for testing and playing around with the lib: stay tuned !!!!&lt;/p&gt;
&lt;p&gt;PyLR is available on &lt;a href="https://github.com/Mappy/PyLR"&gt;github&lt;/a&gt; and is released under the Apache licence, version 2.&lt;/p&gt;</summary><category term="OpenLR"></category><category term="Python"></category><category term="OpenSource"></category><category term="English"></category></entry><entry><title>Android StreetView-like 360 panorama with OpenGl</title><link href="/Android%20StreetView-like%20360%20panorama.html" rel="alternate"></link><updated>2014-08-04T00:00:00+02:00</updated><author><name>Mappy</name></author><id>tag:,2014-08-04:Android StreetView-like 360 panorama.html</id><summary type="html">&lt;p&gt;&lt;a href="http://mappy.com"&gt;Mappy&lt;/a&gt; offers StreetView-like immersive experience to explore France cities. The web interface uses a &lt;a href="http://fr.mappy.com/#/40/M1/TSearch/Snotre+dame+paris/N42.63223,-2.96266,2.35218,48.85267/Z10/"&gt;Flash player to display the cubic projections of "360" panorama images&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mappy 360 Web player" src="images/mappy_panorama_web_flash_player.png" /&gt;&lt;/p&gt;
&lt;p&gt;To provide the same feature on Android devices, we looked at existing solutions. Two we came accross were :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://krpano.com/"&gt;krpano HTML5 Viewer&lt;/a&gt; works in modern mobile browsers (&lt;a href="http://krpano.com/docu/html5/#supportedsystems"&gt;supported browsers, WebViews&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zarelaky/panoramagl-android"&gt;PanoramaGL&lt;/a&gt; Android library handles many projections (spherical, cubic and cylindrical), JSON configuration, transitions, gyroscope and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still, these two did not exactly match our needs :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Wide device support, starting with Android 2.3&lt;/strong&gt;, while &lt;a href="http://krpano.com/docu/html5/#supportedsystems"&gt;krpano&lt;/a&gt; requires latest Android browsers or &lt;code&gt;WebViews&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;StreetView-like gesture control (rotate, zoom)&lt;/strong&gt;, while &lt;a href="https://github.com/zarelaky/panoramagl-android"&gt;PanoramaGL&lt;/a&gt; handles "Pan-Rotate" as a speed vector we felt not as easy to control. It may be configurable but we didn't find out how.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Click on 3D way arrows&lt;/strong&gt;, while PanoramaGL provides hotspots with visual feedback on click. Still, these are 2D bitmap layers inside textures, as far as we understood.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Mappy 360 Web player" src="images/mappy_panorama_android_01.png" /&gt;
&lt;img alt="Mappy 360 Web player" src="images/mappy_panorama_android_02.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Available on Google Play, &lt;a href="https://play.google.com/store/apps/details?id=com.mappy.app"&gt;Mappy for Android&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's describe the main technical aspects we implemented building our own &lt;em&gt;PanoramicLib&lt;/em&gt;. &lt;/p&gt;
&lt;h1&gt;Cubic projection&lt;/h1&gt;
&lt;p&gt;To display 360 panoramas with cubic projection, we texture the inner faces of a simple cube mesh (6 square faces, 2 triangles each).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bitmap tile faces layout on a cube" src="images/panoramic_cube_01.png" /&gt;
&lt;img alt="Cube faces layout" src="images/panoramic_cube_02.png" /&gt;
&lt;img alt="Cube rotation angles names" src="images/panoramic_cube_04.png" /&gt;&lt;/p&gt;
&lt;p&gt;In the OpenGL 3D space, both cube and camera center are (x=0, y=0, z=0). The camera rotates on itself, using pitch and yaw angles. This is important because the cubic projected textures are valid only if seen from the cube center. Zoom is done just by changing the Field Of View angle (the cube mesh is not scaled).&lt;/p&gt;
&lt;p&gt;&lt;img alt="*PanoramicLib* sample using &amp;quot;target&amp;quot; textures" src="images/panoramic_cube_05.png" /&gt;
&lt;img alt="*PanoramicLib* sample using &amp;quot;target&amp;quot; textures" src="images/panoramic_cube_06.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;PanoramicLib&lt;/em&gt; sample using "target" textures for debugging&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In &lt;em&gt;PanoramicLib&lt;/em&gt; source :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PanoramicGestureListener&lt;/code&gt; class handles scroll and fling gestures to set camera orientation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PanoramicScaleGestureListener&lt;/code&gt; class handles pinch to zoom gesture.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Progressive resolution loading&lt;/h1&gt;
&lt;p&gt;Our panorama images are provided through Web services. For faster loading, low resolution bitmaps (128 * 128) are first downloaded. Higher resolutions are progressively downloaded, updating the cube faces to sharper textures. For high resolutions, faces are divided in multiple tiles of 512 * 512 pixels. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Multiple bitmap tiles per face possibilities" src="images/panoramic_cube_03.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ideally, using tiles would lower the amount of downloaded data because client application could :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download tiles only for visible faces,&lt;/li&gt;
&lt;li&gt;Download max resolution tiles only for zoomed parts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;... but we didn't push this far for now.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;PanoramicLib&lt;/em&gt; source, the &lt;code&gt;PanoramicTile&lt;/code&gt; interface is responsible for handling a bitmap tile and a tiny &lt;code&gt;PanoramicTileIdentifier&lt;/code&gt; structure describing which face of the cube the tile belongs. The "split factor" (&lt;code&gt;PanoramicTileIdentifier.getSplitFactor()&lt;/code&gt;) is number of times the face is splitted.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;splitFactor = 0 : 1 tile per face,&lt;/li&gt;
&lt;li&gt;splitFactor = 1 : 4 tiles per face,&lt;/li&gt;
&lt;li&gt;splitFactor = 2 : 16 tiles per face.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;PanoramicTileIdentifier.getPosition()&lt;/code&gt; gives the position of tile inside the face (0 is top-left).&lt;/p&gt;
&lt;p&gt;Tiles can be added any time during cube rendering. The &lt;code&gt;PanoramicCubeMesh&lt;/code&gt; will consider face, splitfactor and position to add the bitmap on to the corresponding texture. A higher split factor is considered as a higher resolution. The cube will adapt to use the tiles with the highest split factor.&lt;/p&gt;
&lt;p&gt;The face splits are not polygons. The cube mesh vertices never changes and  each face always uses only two triangles. The multiple tiles of a face are actually merged in a single texture. While resolution goes up, new texture buffers are allocated and tile bitmaps are progressively drawn inside (using &lt;code&gt;GLUtils.texSubImage2D()&lt;/code&gt;).&lt;/p&gt;
&lt;h1&gt;Interactive elements with ray-picking&lt;/h1&gt;
&lt;p&gt;To provide click-able 3D arrows as in Google StreetView and move from a panorama to a neighbor one, we needed to detect the click. In 3D space.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Picking is the task of determining which screen-rendered object a user has clicked on."&lt;/em&gt; &lt;a href="http://en.wikipedia.org/wiki/Picking"&gt;(Wikipedia)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The idea with ray-picking is to compute a 3D ray between the camera and the point the user clicked. For each polygon in the scene, you test if the ray intersects it, resolving the &lt;a href="http://en.wikipedia.org/wiki/Line%E2%80%93plane_intersection"&gt;"line-plane intersection" equation&lt;/a&gt;. The closest intersected polygon belongs to the clicked object.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ray picking diagram" src="images/ray_picking_01.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Image from &lt;a href="http://oivdoc90.vsg3d.com/content/88-picking"&gt;VSG, Visualization Science Group - Open Inventor Mentor, 2nd Edition - Volume I&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The picking code comes from &lt;a href="https://github.com/i-schuetz/Android_OpenGL_Picking"&gt;Ivan Schuetz "Android OpenGL Picking"&lt;/a&gt; GitHub project.
It refers to &lt;a href="http://android-raypick.blogspot.de/2012/04/first-i-want-to-state-this-is-my-first.html"&gt;Gregory Beauchamp "Ray picking on Android"&lt;/a&gt; article.&lt;/p&gt;
&lt;p&gt;We adaptated the code to take the picking out of the OpenGL thread. In &lt;code&gt;PanoramicLib&lt;/code&gt;, we notify the &lt;code&gt;Activy&lt;/code&gt; on way arrow click to load next panorama view. This has to run on the UI thread. &lt;/p&gt;
&lt;p&gt;In Ivan Schuetz example, ray intersect computing is done in &lt;code&gt;ExampleGLRenderer.onDrawFrame(GL10 gl)&lt;/code&gt; &lt;a href="https://github.com/i-schuetz/Android_OpenGL_Picking/blob/master/glpicking/src/com/example/glpicking/ExampleGLRenderer.java"&gt;(source)&lt;/a&gt;, calling &lt;code&gt;ExampleGLObject.draw(GL10 gl, Ray ray)&lt;/code&gt; on each scene object. Intersections are logged to Android LogCat from there &lt;a href="https://github.com/i-schuetz/Android_OpenGL_Picking/blob/master/glpicking/src/com/example/glpicking/ExampleGLObject.java"&gt;(source)&lt;/a&gt;. It runs on the OpenGL thread because it requires the OpenGL context to grab projection and modelview matrixes to compute ray and projected objects coordinates.&lt;/p&gt;
&lt;p&gt;To handle intersection computing on the UI thread, we saved the current OpenGL matrixes in a member of each &lt;code&gt;ArrowMesh&lt;/code&gt; instance, on each draw, using &lt;code&gt;MatrixGrabber&lt;/code&gt; class &lt;a href="https://github.com/i-schuetz/Android_OpenGL_Picking/blob/master/glpicking/src/com/example/glpicking/MatrixGrabber.java"&gt;(source)&lt;/a&gt;.&lt;/p&gt;</summary><category term="Android"></category><category term="panorama"></category><category term="360"></category><category term="ray-picking"></category><category term="OpenGL"></category><category term="English"></category></entry><entry><title>Super flexible GeoAutoComplete with Solr</title><link href="/Super%20flexible%20GeoAutoComplete%20with%20Solr.html" rel="alternate"></link><updated>2014-02-25T00:00:00+01:00</updated><author><name>Mappy</name></author><id>tag:,2014-02-25:Super flexible GeoAutoComplete with Solr.html</id><summary type="html">&lt;h1&gt;Super flexible GeoAutoComplete with Solr&lt;/h1&gt;
&lt;p&gt;In an inspiring article &lt;a href="http://www.cominvent.com/2012/01/25/super-flexible-autocomplete-with-solr/"&gt;Cominvent AS&lt;/a&gt; presented us how to use &lt;a href="https://lucene.apache.org/solr/"&gt;Solr&lt;/a&gt; power to implement autocomplete feature. We are going to present you how to add a geographical component to this suggestion.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download and unpack Solr if you have not already &lt;a href="http://www.apache.org/dyn/closer.cgi/lucene/solr/"&gt;http://www.apache.org/dyn/closer.cgi/lucene/solr/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download and unpack &lt;a href="/resources/mappy-autocomplete.zip"&gt;mappy-geoautocomplete.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cd to the autocomplete folder, open README.TXT and follow the instructions. When done you will have Solr up and running with the example data indexed into the “acgeo” core.&lt;/li&gt;
&lt;li&gt;When you browse to http://localhost:8000/ and start typing, you will see a map and countries and cities suggested&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As ranking factor, we use a combination of the population of the countries and cities, the textual relevancy and, that is the main point of our article, the proximity to the center of the map we display.
As the use of population and text relevancy has been explained in &lt;a href="http://www.cominvent.com/2012/01/25/super-flexible-autocomplete-with-solr/"&gt;Cominvent As&lt;/a&gt; article, let's focus on the geographical part of the score.
First we need to store the coordinates for each city and country. Thus we add longitude (lng) and latitude (lat) fields in our schema.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lng&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;float&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;indexed=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;stored=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;omitNorms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lat&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;float&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;indexed=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;stored=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;omitNorms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we need to modify solrconfig.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;requestHandler&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;solr.SearchHandler&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;acgeo&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;default=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;lst&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;defaults&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;defType&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;edismax&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;10&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fl&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;*,score&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qf&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;name^30 textng^50.0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pf&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;textnge^50.0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bf&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;product(log(sum(population,1)),100)^20&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Define relative importance between types. May be overridden per request by e.g. &amp;amp;personboost=120 --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;product(product(map(query($type1query),0,0,1,$type1boost),map(query($type2query),0,0,1,$type2boost),map(query($type3query),0,0,1,$type3boost),map(query($type4query),0,0,1,$type4boost),$typeboost), geoboost($eps,$mu,$lat_min,$lng_min,$lat_max,$lng_max,lat,lng))&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;typeboost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1.0&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type1query&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;type:&amp;quot;Countries&amp;quot;&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type1boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.9&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type2query&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;type:&amp;quot;Cities&amp;quot;&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type2boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.5&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type3query&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;type:&amp;quot;NA&amp;quot;&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type3boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.0&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type4query&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;type:&amp;quot;NA&amp;quot;&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type4boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.0&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lng_min&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lat_min&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lng_max&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lat_max&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;eps&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.1&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mu&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1.0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;debugQuery&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/requestHandler&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that our Solr is prepared to manage request with coordinates, we obviously have to send it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://localhost:8983/solr/acgeo/select?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;delay&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;dataType&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;jsonp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;term&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;wt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;json.wrf&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;callback&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;lat_min&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBounds&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getSouth&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;lat_max&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBounds&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getNorth&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;lng_min&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBounds&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getWest&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;lng_max&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBounds&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getEast&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even if Solr &lt;a href="http://wiki.apache.org/solr/FunctionQuery"&gt;FunctionQuery&lt;/a&gt; gives us a set of possibility, it may not fit our particular needs. In that case we can easily extend the list of available functions by writing our own in Java. Let's implement a &lt;code&gt;geoboost&lt;/code&gt; function that is equal to &lt;code&gt;1&lt;/code&gt; inside a given bounding box, and that is decreasing until &lt;code&gt;epsilon&lt;/code&gt; outside the bounding box. The decreasing speed is configurable via parameter &lt;code&gt;mu&lt;/code&gt; (A plot of this function is available &lt;a href="/images/geoboost.png"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;geoboost(epsilon, mu, lat_min, lng_min, lat_max, lng_max)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have to write a parser (i.e. a class implementing &lt;a href="http://wiki.apache.org/solr/SolrPlugins#ValueSourceParser"&gt;org.apache.solr.search.ValueSourceParser&lt;/a&gt; that reads the value from the left to the right)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GeoBoostValueParser&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ValueSourceParser&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FunctionQParser&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;SyntaxError&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lngmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lngmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseValueSource&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseValueSource&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GeoBoostFunction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;latmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lngmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;latmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lngmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the class that does the real job, where the result is returned by &lt;code&gt;public FunctionValues getValues()&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GeoBoostFunction&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lngmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lngmax&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;GeoBoostFunction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lngmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lngmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;    
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@Override&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;FunctionValues&lt;/span&gt; &lt;span class="nf"&gt;getValues&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AtomicReaderContext&lt;/span&gt; &lt;span class="n"&gt;readerContext&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FloatDocValues&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;@Override&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;floatVal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latvals&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lngvals&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;//class GeoBoostFunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the function and parser are written and compiled, we register the function in the sorlconfig.xml by adding the path to our *.jar and specifying our parser.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;config&amp;gt;&lt;/span&gt;
    ...
    &lt;span class="nt"&gt;&amp;lt;lib&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lib/lbs-geoboost.jar&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;valueSourceParser&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;geoboost&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.mappy.lbs.solr.search.function.GeoBoostValueParser&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/config&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can run and test our configuration.&lt;/p&gt;
&lt;p&gt;Using the default bounding box value (0,0,0,0) &lt;code&gt;http://127.0.0.1:8983/solr/acgeo/select?q=pa&amp;amp;wt=json&amp;amp;&lt;/code&gt; leads to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;numFound&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;docs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pakistan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;São Paulo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paraguay&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Papua New Guinea&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Palestine&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Panama&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Patna&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Palembang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Padang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using a bounding box around Paris &lt;code&gt;http://127.0.0.1:8983/solr/acgeo/select?q=pa&amp;amp;wt=json&amp;amp;lat_min=48&amp;amp;lat_max=48.5&amp;amp;lng_min=2&amp;amp;lng_max=2.5&lt;/code&gt; leads to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;numFound&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;docs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sant Andreu de Palomar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pakistan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Palma&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;São Paulo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paraguay&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Papua New Guinea&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Palestine&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Panama&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Patna&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
             &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Solr"></category><category term="OpenSource"></category><category term="English"></category></entry><entry><title>Mappy et Oslandia vers l'OpenSource</title><link href="/Mappy%20et%20Oslandia%20vers%20l'OpenSource.html" rel="alternate"></link><updated>2014-02-11T00:00:00+01:00</updated><author><name>Mappy</name></author><id>tag:,2014-02-11:Mappy et Oslandia vers l'OpenSource.html</id><summary type="html">&lt;p&gt;Paris, le 11 février 2014. &lt;/p&gt;
&lt;p&gt;Depuis plus de deux ans, Oslandia accompagne Mappy dans sa transition vers l’OpenSource. La première étape est symbolisée par le projet de migration des bases de données Oracle du backoffice cartographique vers PostGIS. Celui-ci vient notamment d’être finalisé et fonctionne actuellement en production.&lt;/p&gt;
&lt;p&gt;Mappy propose des services de calcul d’itinéraire et de cartographie. Supportant plusieurs milliards de requêtes par mois, la plateforme LBS (Location Based Services) est au cœur de l’activité de Mappy et sert de socle aux nouveaux produits tel que le Web To Store.&lt;/p&gt;
&lt;p&gt;Oslandia travaille conjointement avec Mappy pour migrer cette plateforme cartographique d’une solution développée en interne, vers une solution basée entièrement sur des logiciels libres, afin de préparer les défis techniques et opérationnels à venir.&lt;/p&gt;
&lt;p&gt;Les backoffices de préparation des données et de création du plan cartographique ont été entièrement migrés avec succès.&lt;/p&gt;
&lt;p&gt;Cette pile applicative était initialement basée sur Oracle Spatial, SQL Server, et des outils internes non standards de création de carte. Elle n’utilise plus désormais que des composants OpenSource.&lt;/p&gt;
&lt;p&gt;Oracle et SQL Server ont été entièrement remplacés par PostgreSQL et PostGIS, qui constitue le socle de base de données géographique pour le stockage et le prétraitement des données géographiques. Mapnik, Python, Tornado, Varnish, MemCached, Debian sont les autres composants OpenSource utilisés.&lt;/p&gt;
&lt;p&gt;La migration vers ces composants OpenSource a permis de rationnaliser et d’optimiser l’architecture du composant « carte »:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Temps de traitement des données réduit &lt;/li&gt;
&lt;li&gt;Standardisation des formats et API&lt;/li&gt;
&lt;li&gt;Forte diminution de la dette technique&lt;/li&gt;
&lt;li&gt;Nombre de lignes de code optimisé&lt;/li&gt;
&lt;li&gt;Baisse du coût de la plateforme, et passage à l’échelle plus économique&lt;/li&gt;
&lt;li&gt;Montée en compétence et motivation des équipes&lt;/li&gt;
&lt;li&gt;Maîtrise complète des outils&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oslandia a permis à Mappy d’intégrer la culture et les méthodes de l’OpenSource dans ses équipes, et leur a fourni les compétences techniques nécessaires pour mettre en place cette architecture à forte charge. Les compétences d’Oslandia en systèmes d’information géographique, et son expertise unique en France sur PostGIS, ont permis de mener à bien ce projet.&lt;/p&gt;
&lt;p&gt;Mappy a ainsi pu bénéficier des dernières technologies OpenSource à la pointe de l’état de l’art, et également pu contribuer à certains projets libres comme Mapnik.&lt;/p&gt;
&lt;p&gt;PostGIS, la base de données géographique supportant toute l’infrastructure, a permis d’atteindre de très hautes performances et un niveau fonctionnel élevé.&lt;/p&gt;
&lt;p&gt;La base de 75Go bénéficie des toutes dernières avancées de PostgreSQL et PostGIS, tels que la réplication au fil de l’eau, les nouvelles fonctions géographiques de PostGIS, les requêtes CTE récursives, le support de JSON et bien plus.&lt;/p&gt;
&lt;p&gt;Audrey Malherbe, responsable du projet chez Mappy, souligne que le choix de PostgreSQL et de PostGIS était une évidence : &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;« Nous voulions basculer dans l’OpenSource en nous appuyant sur des technologies performantes et reconnues comme PostGIS. Il était important pour nous de contribuer à l’OpenSource et l’expertise technique d’Oslandia et son implication dans la communauté nous ont permis de nous lancer dans cette aventure en toute confiance. »&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mappy a l’intention de continuer ce virage vers l’OpenSource et d’étendre la méthode de migration aux autres services de la plateforme cartographique.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;À propos de Mappy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spécialiste du calcul d’itinéraire et des services de cartographie, Mappy est reconnu comme le leader français de la recherche locale par la carte, sur Internet, tablettes, mobiles et GPS.&lt;/p&gt;
&lt;p&gt;Mappy propose à ses utilisateurs trois types de recherche : la recherche par le plan, qui permet de visualiser un quartier, de s’immerger dans la ville  grâce aux vues 360° dans 320 villes françaises, mais également de pousser la porte de plusieurs milliers de commerces ; la recherche d’itinéraires disponible pour les déplacements en voiture, en transports en commun, en vélo et en mode piéton ; enfin la recherche de produits, permettant de localiser un produit précis, dans une zone géographique donnée, de connaître son prix et sa disponibilité.&lt;/p&gt;
&lt;p&gt;Acteur majeur du déplacement urbain, Mappy propose aux annonceurs une solution géolocalisée sur l’ensemble du territoire, facilitant les dispositifs web-to-store et la génération de trafic vers leurs points de vente.&lt;/p&gt;
&lt;p&gt;Mappy compte aujourd’hui plus de 10 millions d’utilisateurs mensuels sur Internet, tablettes et mobiles (Mappy et MappyGPS Free).&lt;/p&gt;
&lt;p&gt;Mappy est une filiale à 100% de Solocal Group. &lt;a href="http://www.mappy.com"&gt;http://www.mappy.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;À propos d’Oslandia&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Oslandia est une ENL (Entreprise du Numérique Libre) Française spécialisée en systèmes d’information géographique (SIG) Open Source, et particulièrement en bases de données spatiales, Web Services OGC et SIG bureautiques. Oslandia propose une offre de service complète : conseil, audit, développement, support, formation.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.oslandia.com"&gt;http://www.oslandia.com&lt;/a&gt; &lt;/p&gt;</summary><category term="French"></category><category term="Mapnik"></category><category term="PostGIS"></category><category term="OpenSource"></category></entry><entry><title>FOSS4G 2013 : Mappy-ing OpenSource</title><link href="/FOSS4G%202013%20:%20Mappy-ing%20Open%20Source.html" rel="alternate"></link><updated>2013-09-25T00:00:00+02:00</updated><author><name>Mappy</name></author><id>tag:,2013-09-25:FOSS4G 2013 : Mappy-ing Open Source.html</id><summary type="html">&lt;p&gt;&lt;img alt="Foss4g2013" src="images/foss4g2013.png" /&gt;&lt;/p&gt;
&lt;p&gt;The presentation of our work on map service at &lt;a href="http://2013.foss4g.org/"&gt;Foss4G2013&lt;/a&gt; in Notthingham&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="www.mappy.com"&gt;Mappy&lt;/a&gt; is an online mapping company based in France and fully-owned by Solocal Group (&lt;a href="www.pagesjaunes.fr"&gt;PagesJaunes&lt;/a&gt;). Mappy was the pioneer in online mapping in France, and holds a significant market share in France and Belgium (about 10 millions monthly users). The company has developed an home-made LBS platform since 1998. The mapping service delivers 100 millions tiles a day. At the beginning of 2012, Mappy decided to redesign its core mapping service to meet new business challenges. The company needed a more standard and open source solution. Developers and product managers have fallen in love with &lt;a href="www.mapnik.org"&gt;Mapnik&lt;/a&gt; (some for code and performance, others for the map display quality). The team made the decision to build the new mapping service around Mapnik and others open source tools like PostGIS. The project was challenging : we switched from a MSSqlServer database/home made mapping engine/Windows architecture to a postgis database/mapnik engine/Linux one. During the development, we've seen and appreciated the energy around Mapnik and we started to gradually dive into code and contribute to some features. This talk will present a feedback on the overhaul : the functional and technical challenges, the decision to contribute to Mapnik project, the release of this service, its performance and the future roadmap.&lt;/p&gt;
&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/26407067" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="https://www.slideshare.net/AudreyMalherbe/foss42013-mappying-opensource" title="Foss4G2013 Mappy-ing Open Source" target="_blank"&gt;&lt;/div&gt;&lt;/p&gt;</summary><category term="English"></category><category term="Mapnik"></category><category term="PostGIS"></category><category term="OpenSource"></category></entry></feed>