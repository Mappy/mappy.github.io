<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mappy Labs</title><link href="/" rel="alternate"></link><link href="/feeds/rss.xml" rel="self"></link><id>/</id><updated>2015-07-09T00:00:00+02:00</updated><entry><title>Mappy.com dorénavant responsive !</title><link href="/mappy-responsive.html" rel="alternate"></link><updated>2015-07-09T00:00:00+02:00</updated><author><name>Mappy</name></author><id>tag:,2015-07-09:mappy-responsive.html</id><summary type="html">&lt;p&gt;Depuis le mercredi 20 mai, mappy.com propose un site unique et responsive pour tous les navigateurs (bureau, tablette ou mobile).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Site petit écran" src="images/responsive/petitecran.png" /&gt;
&lt;img alt="Site écran moyen" src="images/responsive/moyenecran.png" /&gt;
&lt;img alt="Site grand écran" src="images/responsive/grandecran.png" /&gt;&lt;/p&gt;
&lt;p&gt;En effet, auparavant, les sites &lt;a href="//fr.mappy.com"&gt;fr.mappy.com&lt;/a&gt;, &lt;a href="//fr-be.mappy.com"&gt;fr-be.mappy.com&lt;/a&gt;, &lt;a href="//nl-be.mappy.com"&gt;nl-be.mappy.com&lt;/a&gt; et &lt;a href="//en.mappy.com"&gt;en.mappy.com&lt;/a&gt; étaient dédiés aux navigateurs de bureau et m.mappy.com aux navigateurs mobiles et tablettes.
Ce billet a pour but de présenter le contexte et notre parcours vers cette orientation.&lt;/p&gt;
&lt;h2&gt;Historiquement 2 sites&lt;/h2&gt;
&lt;p&gt;Mappy a mis en ligne mobile il y a plus de 5 ans.
D’abord via des technologies de type BkRender (pour les téléphones très limités de l’époque), le site a évolué à plusieurs reprises vers une version "HTML5" incorporant une base commune de code avec le site principal (notamment backbone et l’API de cartographie Mappy).&lt;/p&gt;
&lt;h2&gt;Réflexion autour du Responsive&lt;/h2&gt;
&lt;p&gt;Nos principales motivations au passage à un site responsive étaient :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;d’arrêter le double développement d’User-Stories à la fois sur le site fixe et mobile (et, ainsi, de livrer les futures User-Stories sur tous les supports),&lt;/li&gt;
&lt;li&gt;l’&lt;a href="http://googlewebmastercentral.blogspot.fr/2015/04/faqs-april-21st-mobile-friendly.html"&gt;annonce de Google&lt;/a&gt; favorisant les sites "mobile-friendly" alors que le site mobile était fermé aux robots,&lt;/li&gt;
&lt;li&gt;le fait de n’avoir qu’une unique base de code, afin de simplifier le développement de nouvelles fonctionnalités et la maintenance,&lt;/li&gt;
&lt;li&gt;d’offrir une version mobile pour les versions étrangères.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Le passage à un site responsive soulève néanmoins quelques points de vigilance quant au processus actuel :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chaque fonctionnalité doit être testée sur plus de support qu’auparavant,&lt;/li&gt;
&lt;li&gt;lors de la conception, certains points doivent être pris en compte (conception sur petit et grand écran, gestion du touch, image en haute définition, etc).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enfin, certaines fonctionnalités sont différentes entre le site fixe et le site mobile.
L’itinéraire sur mobile par exemple, présente un écran affichant le sommaire de la feuille de route, écran inexistant sur la version fixe.&lt;/p&gt;
&lt;p&gt;Une preuve de concept a alors été réalisée pour déterminer la faisabilité technique d’un site reponsive.
Cette preuve de concept a démontré qu’un résultat satisfaisant pouvait être atteint à un coût acceptable (environ 2 itérations de développement).&lt;/p&gt;
&lt;h2&gt;Implémentation&lt;/h2&gt;
&lt;h3&gt;"Responsive client" ou "dynamic server" ?&lt;/h3&gt;
&lt;p&gt;L’implémentation peut s’effectuer de 2 façons, éventuellement complémentaires :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;l’&lt;strong&gt;approche "responsive client"&lt;/strong&gt; : le même code est envoyé par le serveur à tous les navigateurs, qu’ils soient mobiles ou non, et l’affichage des éléments graphiques est conditionné par des &lt;code&gt;media queries&lt;/code&gt; CSS et des comportements différents éventuellement conditionnés par du code JavaScript ;&lt;/li&gt;
&lt;li&gt;l’&lt;strong&gt;approche "dynamic server"&lt;/strong&gt; : un contenu HTML, CSS et JS différent est envoyé à chaque client en fonction du &lt;code&gt;User-Agent&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L’approche "dynamic server" a l’avantage de pouvoir servir un contenu allégé de façon bien plus simple qu’avec l’approche côté cliente (notamment pour les images). Cependant, elle a l’énorme inconvénient de servir un contenu différent en fonction du &lt;code&gt;User-Agent&lt;/code&gt;, une pratique dangereuse en cas de &lt;code&gt;reverse-proxy&lt;/code&gt; (à moins d’ajouter un entête &lt;code&gt;Vary: User-Agent&lt;/code&gt; qui rend l’utilisation d’un reverse-proxy caduque). Enfin, certains navigateurs se disent iPhone, Android et Windows Phone comme c’est le cas pour &lt;a href="https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx#code-snippet-11"&gt;Windows Phone 8.1&lt;/a&gt; ce qui rend la tâche complexe.&lt;/p&gt;
&lt;p&gt;L’approche "responsive client", préconisée par les &lt;a href="https://developers.google.com/webmasters/mobile-sites/mobile-seo/configurations/responsive-design#why-responsive-design"&gt;recommandations SEO&lt;/a&gt; de Google, n’a pas ces inconvénients puisque le même contenu est servi à tous.
Par contre, il est plus difficile de charger un contenu allégé en fonction du navigateur.&lt;/p&gt;
&lt;h3&gt;CSS&lt;/h3&gt;
&lt;p&gt;L’implémentation du site responsive s’effectue principalement via des "&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries?redirectlocale=en-US&amp;amp;redirectslug=CSS%2FMedia_queries"&gt;CSS media queries&lt;/a&gt;" afin d’afficher ou masquer des éléments ou les ré-arranger en fonction de la taille d’écran :&lt;/p&gt;
&lt;h4&gt;Site grand écran&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Zoning grand écran" src="images/responsive/zoning-fixe.jpg" /&gt;&lt;/p&gt;
&lt;h4&gt;Site petit écran&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Zoning petit écran" src="images/responsive/zoning-mobile-home.jpg" /&gt;
&lt;img alt="Zoning petit écran" src="images/responsive/zoning-mobile-poi.jpg" /&gt;
&lt;img alt="Zoning petit écran" src="images/responsive/zoning-mobile-resultats.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Page d’accueil / écran de résultats / affichage d’un POI ou un itinéraire&lt;/p&gt;
&lt;p&gt;3 points de rupture principaux ont été définis pour :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;les petits écrans (par exemple les téléphones en portrait/paysage et tablette en portrait),&lt;/li&gt;
&lt;li&gt;les écrans moyens (par exemple les tablettes en mode paysage),&lt;/li&gt;
&lt;li&gt;et enfin les grands écrans (toutes les plus grandes définitions) où certains contenus sont plus aérés (taille des éléments, marge entre la barre gauche et la carte et le bord de l’écran, etc).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un point de détail, depuis le passage au responsive, notre vocabulaire a changé puisque nous parlons de petit ou grand écran plutôt que de fixe et mobile.&lt;/p&gt;
&lt;h3&gt;Optimisations graphiques&lt;/h3&gt;
&lt;p&gt;À la manière de &lt;a href="https://fortawesome.github.io/Font-Awesome/icons/"&gt;Font Awesome&lt;/a&gt;, une grande partie de nos icônes (catégories de commerce, outils de la carte, etc) utilise une police de caractère spéciale les aggrégeant. Cela permet de s’abstraire d’une version normale et haute densité de pixel ("retina").
Cette technique se limite toutefois à des icônes d’une seule couleur donc nous conservons encore quelques sprites.&lt;/p&gt;
&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;p&gt;Certains cas minoritaires nécessitent l’utilisation de JavaScript pour adapter le comportement à la cible (notamment le choix des emplacements publicitaires à afficher ou les différences de comportement comme le cas du sommaire de la feuille de route évoqué plus haut).&lt;/p&gt;
&lt;p&gt;Néanmoins, la majorité des cas ne concerne que des adaptations au niveau des CSS.&lt;/p&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;p&gt;Afin d’avoir un feedback rapide lors de nos développements mais également pour faciliter les tests manuels, nous avons opté pour quelques supports physiques de téléphones ou tablettes de type &lt;a href="http://devicelab.vanamco.com/"&gt;devicelab&lt;/a&gt; couplé à &lt;a href="http://vanamco.com/ghostlab/"&gt;GhostLab&lt;/a&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mur de &amp;quot;devices&amp;quot;" src="images/responsive/mur-devices.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Enfin, nos tests Selenium sont en cours d’évolution puisque nous comptons maintenent les lancer sous 2 formats (grand et petit écran).&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Le passage au site "responsive" s’est passé sans accroc.&lt;/p&gt;
&lt;p&gt;Le travail a porté ses fruits, notamment sur 2 points :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;l’impact SEO suite à la mise en ligne du site reponsive a été largement positif avec une progression entre 20 et 30 % (également lié à la suppression du message d’avertissement dans les pages de résultats Google indiquant que le site n’était pas adapté au mobile suite au blocage des robots sur ce même domaine),&lt;/li&gt;
&lt;li&gt;l’unification du code simplifie le développement et allège les processus au quotidien (moins de livrables, moins d’environnements, moins de projets dont des briques communes, etc).&lt;/li&gt;
&lt;/ul&gt;</summary><category term="French"></category><category term="JavaScript"></category><category term="responsive"></category></entry><entry><title>Meet Up Enterprise Search Paris</title><link href="/Meet%20Up%20Enterprise%20Search%20Paris.html" rel="alternate"></link><updated>2015-04-08T00:00:00+02:00</updated><author><name>Mappy</name></author><id>tag:,2015-04-08:Meet Up Enterprise Search Paris.html</id><summary type="html">&lt;p&gt;Voici la présentation effectuée par Mappy lors du dernier &lt;a href="http://www.meetup.com/Enterprise-Search-Paris/events/220773793/"&gt;Meet Up Enterprise Search Paris&lt;/a&gt; impeccablement organisé par &lt;a href="http://www.francelabs.com/"&gt;France Labs&lt;/a&gt; au NUMA.&lt;/p&gt;
&lt;iframe src="//slides.com/solrmappy/deck/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="Solr"></category><category term="OpenSource"></category><category term="MeetUp"></category></entry><entry><title>JavaScript : de Q aux promesses natives</title><link href="/javascript-de-Q-aux-promesses-natives.html" rel="alternate"></link><updated>2015-04-08T00:00:00+02:00</updated><author><name>Mappy</name></author><id>tag:,2015-04-08:javascript-de-Q-aux-promesses-natives.html</id><summary type="html">&lt;p&gt;JavaScript est un langage qui utilise un système de concurrence basé sur la boucle d’événement (&lt;a href="https://en.wikipedia.org/wiki/Event_loop"&gt;event loop&lt;/a&gt;).&lt;/p&gt;
&lt;h1&gt;Boucle d’événement ?&lt;/h1&gt;
&lt;p&gt;Le principe est d’avoir une boucle s’exécutant indéfiniment et où il est possible d’enregistrer des fonctions pour certains événements (&lt;code&gt;timeout&lt;/code&gt;, &lt;code&gt;click&lt;/code&gt;, retour d’une réponse ajax, accès à un fichier, etc). Lorsque l’événement se produit, la fonction est exécutée au prochain tour de boucle.
L’avantage principal est le fait que les entrées/sorties sont non bloquantes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Event loop" src="images/javascript/event-loop.png" /&gt;&lt;/p&gt;
&lt;p&gt;Si vous souhaitez en savoir plus sur la boucle d’événement, je vous recommande vivement cette présentation de &lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ"&gt;Philip Roberts « What the heck is the event loop anyway? »&lt;/a&gt; présentée lors de la JSConf EU 2014 ou alors cette page sur la &lt;a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/EventLoop"&gt;gestion de la concurrence et boucle des événements&lt;/a&gt; sur &lt;a href="https://developer.mozilla.org/fr/"&gt;MDN&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Code asynchrone&lt;/h1&gt;
&lt;p&gt;Via ce mode de conception avec la boucle d’évémenent, les appels de fonctions asynchrones sont monnaie courante en JavaScript.
Que cela soit côté client (setTimeout, XMLHttpRequest, Geolocation.getCurrentPosition(),...) ou serveur (par exemple avec les &lt;a href="https://nodejs.org/api/fs.html"&gt;API FileSystem de node&lt;/a&gt;), il est donc souvent nécessaire de passer une ou deux fonctions en paramètre d’un appel, que l'on baptise généralement les &lt;code&gt;callbacks&lt;/code&gt; de succès et d'erreur.&lt;/p&gt;
&lt;p&gt;Lorsque de nombreuses fonctions asynchrones s’enchaînent (comme par exemple plusieurs appels Ajax), on aboutit rapidement à ce qu’on appelle la “pyramide de l’enfer” (ou “Pyramid of Doom”) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;action1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;action2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;action3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;action4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Traitement de v4&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On se rend bien compte que maintenir un tel code est relativement pénible (imaginez ajouter ou supprimer une action).&lt;/p&gt;
&lt;p&gt;Sur le site mappy.com, nous utilisons très régulièrement des enchainements d'appels asynchrones. Un des cas les plus parlants est le calcul d'itinéraire : nous géolocalisons les adresses de départ et d'arrivée, puis nous calculons l'itinéraire avant de l'afficher à l'utilisateur. Ce qui pouvait donner :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;addresses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Paris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lyon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;computeItinerary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itinerary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;displayItinerary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itinerary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;errorCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;errorCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;errorCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;C’est là qu’interviennent les promesses, qui sont une des façons de “remettre à plat” cette pyramide.&lt;/p&gt;
&lt;h1&gt;Les promesses&lt;/h1&gt;
&lt;p&gt;Le terme &lt;code&gt;promise&lt;/code&gt; a été proposé par Daniel Friedman et David Wise en 1976 à travers la conférence « The Impact of Applicative Programming on Multiprocessing » à l’International Conference on Parallel Processing. Les promesses sont à rapprocher des &lt;code&gt;futurs&lt;/code&gt; (&lt;code&gt;futures&lt;/code&gt;) ou &lt;code&gt;délais&lt;/code&gt; (&lt;code&gt;delays&lt;/code&gt;) que l’on retrouve notamment en &lt;code&gt;Dart&lt;/code&gt;, en &lt;code&gt;Python&lt;/code&gt;, en &lt;code&gt;Java&lt;/code&gt; (&lt;code&gt;java.util.concurrent.Future&lt;/code&gt;), en &lt;code&gt;Scala&lt;/code&gt;, &lt;a href="https://en.wikipedia.org/wiki/Futures_and_promises#List_of_implementations"&gt;etc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Avec les promesses, le code présenté en introduction pourrait s’écrire de la sorte :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;action1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Traintement de v4&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;et le code simplifié du calcul d’itinéraire pourrait s’écrire ainsi :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;addresses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Paris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lyon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;computeItinerary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;displayItinerary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Une première approche avec Q&lt;/h1&gt;
&lt;p&gt;Sur le site Mappy, les appels asynchrones ont étés migrés vers des promesses en avril 2013 en utilisant la librairie &lt;a href="https://github.com/kriskowal/q"&gt;Q&lt;/a&gt;.
Parmi les &lt;a href="http://microjs.com/#promise"&gt;multiples alternatives&lt;/a&gt;, nous nous sommes intéressés aux &lt;code&gt;Deferred&lt;/code&gt; de jQuery, notamment car elles étaient déjà incluses sur le site.
Néanmoins, Q a été choisie par rapport aux &lt;code&gt;Deferred&lt;/code&gt; de jQuery principalement pour sa gestion des exceptions plus fine  (plus de &lt;a href="https://github.com/kriskowal/q/wiki/Coming-from-jQuery#exception-handling"&gt;détails sur le site de Q&lt;/a&gt;).
Par ailleurs, les &lt;code&gt;Deferred&lt;/code&gt; de jQuery ne sont pas compatibles avec la spécification &lt;a href="https://promisesaplus.com/"&gt;Promise/A+&lt;/a&gt;, donc sujets à plus de travail en cas de changement de librairie (voici la liste de &lt;a href="https://github.com/promises-aplus/promises-spec/blob/master/implementations.md"&gt;librairie et leur compatibilité face à la spécification&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Si l’on reprend l’exemple simplifié du calcul d’itinéraire précédent, le code s’écrira de la sorte via &lt;code&gt;Q&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Q.all([
    geocode(&amp;#39;Paris&amp;#39;),
    geocode(&amp;#39;Lyon&amp;#39;)
])
.then(computeItinerary)
.then(displayItinerary)
.fail(errorCallback);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Le &lt;code&gt;fail&lt;/code&gt; s’applique à n’importe quelle erreur ayant lieu au sein des fonctions précédemment appelées.&lt;/p&gt;
&lt;p&gt;Voici l’implémentation d’une fonction, par exemple &lt;code&gt;geocode&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;geocode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;deferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// Lancement d’une requête Ajax, etc&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;deferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;coordinates&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;48.856898&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.350843&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="c1"&gt;// et, en cas d’erreur :&lt;/span&gt;
        &lt;span class="c1"&gt;// deferred.reject(&amp;#39;erreur&amp;#39;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;deferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Les méthodes &lt;code&gt;geocode&lt;/code&gt;, &lt;code&gt;computeItinerary&lt;/code&gt; et &lt;code&gt;displayItinerary&lt;/code&gt; renvoient l’attribut &lt;code&gt;promise&lt;/code&gt; d’un objet &lt;code&gt;deferred&lt;/code&gt; renvoyé via un appel à &lt;a href="https://github.com/kriskowal/q#using-deferreds"&gt;&lt;code&gt;Q.defer()&lt;/code&gt;&lt;/a&gt; (aucun rapport avec la librairie de jQuery). En cas de succès, la méthode &lt;code&gt;resolve&lt;/code&gt; de l’objet &lt;code&gt;deferred&lt;/code&gt; sera invoqué et la méthode &lt;code&gt;reject&lt;/code&gt; en cas d’erreur.&lt;/p&gt;
&lt;p&gt;En plus d’être plus lisible, ce code est également optimisé puisque les 2 requêtes de géocodage sont lancées en parallèles via &lt;a href="https://github.com/kriskowal/q#combination"&gt;&lt;code&gt;Q.all&lt;/code&gt;&lt;/a&gt;.
La fonction &lt;code&gt;computeItinerary&lt;/code&gt; consomme les résultats des 2 autres promesses précédentes et retourne une valeur, consommé par la méthode &lt;code&gt;displayItinerary&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Maintenant : les promesses natives&lt;/h1&gt;
&lt;p&gt;Les promesses ont fait leur bonhomme de chemin dans les spécifications d’ECMAScript puisqu’elles font maintenant partie de la version 6 de la norme (ES6).
Cette version commence par ailleurs a être supportée par les principaux navigateurs du marché avec Firefox 31+, Chrome 41+, Opera 28+, Safari 7.1+ et iOS 8 :&lt;/p&gt;
&lt;p&gt;&lt;img alt="support des promesses natives" src="images/javascript/es6-promise-support.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kangax.github.io/compat-table/es6/#Promise"&gt;Table de compatibilité d’ECMAScript 6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pour ces raisons, il nous a semblé intéressant de délaisser la librairie Q au profit des promesses ES6 natives.
Bien sûr, nous utilisons un polyfill (&lt;a href="https://github.com/jakearchibald/es6-promise"&gt;es6-promise&lt;/a&gt;) pour les navigateurs incompatibles, Internet Explorer en tête.
Ce polyfill est un sous-ensemble de &lt;a href="https://github.com/tildeio/rsvp.js"&gt;rsvp.js&lt;/a&gt;, une implémentation plus complète.&lt;/p&gt;
&lt;p&gt;Voici comment on déclarerait la fonction geocode avec une promesse native :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;geocode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Lancement d’une requête Ajax, etc&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;coordinates&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;48.856898&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.350843&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="c1"&gt;// et, en cas d’erreur :&lt;/span&gt;
            &lt;span class="c1"&gt;// reject(&amp;#39;erreur&amp;#39;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;L’intérêt est de retourner immédiatement la promesse. On utilisera la méthode ci-dessus ainsi :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Le &lt;code&gt;catch&lt;/code&gt; est un mot réservé et pose problème sous Internet Explorer, aussi, on préférera cette seconde syntaxe :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vous trouverez des exemples plus concret avec un appel Ajax à travers 2 JsFiddle, le &lt;a href="http://jsfiddle.net/2ve41szc/"&gt;premier&lt;/a&gt; avec l’utilisation du &lt;code&gt;catch&lt;/code&gt;, le &lt;a href="http://jsfiddle.net/2ve41szc/1/"&gt;second&lt;/a&gt; avec la deuxième forme.&lt;/p&gt;
&lt;p&gt;Il est également possible de lancer plusieurs promesses en parallèle (requete1 et requete2 dans cet exemple) via cette syntaxe :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;requete1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;requete2&lt;/span&gt;
&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Une fois les 2 promesses requete1 et requete2 résolues...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nous avons donc, avec notre exemple d'itinéraire habituel :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Promise.all([
    geocode(&amp;#39;Paris&amp;#39;),
    geocode(&amp;#39;Lyon&amp;#39;)
])
.then(computeItinerary)
.then(displayItinerary)
.then(undefined, errorCallback);
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Et demain ?&lt;/h1&gt;
&lt;p&gt;Les promesses natives avec un polyfill sont sans doute une des approches les plus efficaces pour la gestion de l'asynchrone.&lt;/p&gt;
&lt;p&gt;Cela pourrait néanmoins changer puisqu’une proposition pour ECMAScript 7 (ou ES7) introduit le mot clé &lt;code&gt;await&lt;/code&gt; permettant de résoudre des fonctions asynchrones en les écrivant de façon synchrone :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;itinerary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;paris&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Paris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;lyon&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lyon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;itinerary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;computeItinerary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;paris&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lyon&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;displayItinerary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itinerary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notez le mot clé &lt;code&gt;async&lt;/code&gt; en début de fonction, pour signaler que la méthode utilise un &lt;code&gt;await&lt;/code&gt;.
Si vous êtes téméraire, le bout de code ci-dessus est déjà utilisable dans votre code source via l’utilisation d’un transpileur comme &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt; (programme transformant un code ES6 ou ES7 en code ES5, bien plus supporté parmi les navigateurs actuels).
D’ailleurs, si vous souhaitez tenter l’expérience, cet &lt;a href="http://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html"&gt;article (en anglais), sur le blog de pouchdb&lt;/a&gt;, en parle plus en détails.&lt;/p&gt;</summary><category term="French"></category><category term="JavaScript"></category></entry><entry><title>Un plugin Leaflet pour le site Mappy (Leaflet-active-area)</title><link href="/leaflet-active-area.html" rel="alternate"></link><updated>2015-02-16T00:00:00+01:00</updated><author><name>Mappy</name></author><id>tag:,2015-02-16:leaflet-active-area.html</id><summary type="html">&lt;h1&gt;Un plugin Leaflet pour le site mappy.com&lt;/h1&gt;
&lt;p&gt;Lors de la mise en place de Leaflet sur mappy.com, (comme présenté dans un &lt;a href="/mappy-com-migre-vers-leaflet.html"&gt;billet précédent&lt;/a&gt;), nous avons eu l'occasion de développer un plugin Leaflet, proposé en open-source.&lt;/p&gt;
&lt;h3&gt;Mise en avant de la carte&lt;/h3&gt;
&lt;p&gt;L’un des objectifs de cette nouvelle version fût de mettre en avant la carte dans l’interface, qui n'occupait qu’une petite partie de l’interface de la version précédente. Ainsi, sur les pages de fiche POI ou sur la feuille de route, la carte occupe tout l’écran, du haut en bas de l’écran.&lt;/p&gt;
&lt;p&gt;Cela est surtout visible sur les grandes résolutions, où chaque bord laisse place à la carte comme le témoignent les captures d’écran suivantes :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Itinéraire" src="images/leaflet-active-area/iti.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fr.mappy.com/itineraire/Paris%2075001%20-%2075116/Vincennes%2094300?opt.vehicle=midcar&amp;amp;opt.cost=time&amp;amp;opt.notoll=0&amp;amp;opt.infotraffic=0&amp;amp;opt.gascost=1.558&amp;amp;opt.gas=petrol&amp;amp;opt.compensation=0&amp;amp;routeidx=0"&gt;Feuille de route d’un itinéraire&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fiche POI" src="images/leaflet-active-area/poi.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fr.mappy.com/poi/51f0bde784aebbc34d4a0cc7"&gt;Fiche POI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comme on peut le voir sur les images ci-dessus, et vu que la carte occupe presque tout l’écran, les informations - marqueurs et polyline - ne sont pas centrées. Le centre de la carte correspond au centre de l’écran, caché derrière les éléments HTML.
Cela est plus visible lorsque l’on rend transparents ces éléments HTML comme le montrent les captures suivantes :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Itinéraire avec fond transparent" src="images/leaflet-active-area/iti-transparent.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fr.mappy.com/itineraire/Paris%2075001%20-%2075116/Vincennes%2094300?opt.vehicle=midcar&amp;amp;opt.cost=time&amp;amp;opt.notoll=0&amp;amp;opt.infotraffic=0&amp;amp;opt.gascost=1.558&amp;amp;opt.gas=petrol&amp;amp;opt.compensation=0&amp;amp;routeidx=0"&gt;Feuille de route d’un itinéraire avec fond transparent&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fiche POI avec fond transparent" src="images/leaflet-active-area/poi-transparent.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fr.mappy.com/poi/51f0bde784aebbc34d4a0cc7"&gt;Fiche POI avec fond transparent&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Les appels à l’API Leaflet (centrage de la carte, centrage de la vue en fonction de marqueurs, d’un itinéraire) vont naturellement avoir pour centre de la carte le centre de l’écran si celle-ci en occupe la quasi-totalité.&lt;/p&gt;
&lt;h3&gt;Le plugin Leaflet-active-area&lt;/h3&gt;
&lt;p&gt;Afin de pouvoir afficher des marqueurs ou un itinéraire de façon excentrée, nous avons développé un plugin Leaflet pour abstraire ce comportement.&lt;/p&gt;
&lt;p&gt;Il s’agit du plugin &lt;a href="https://github.com/Mappy/Leaflet-active-area"&gt;Leaflet-active-area&lt;/a&gt; qui, comme le montre la &lt;a href="http://techblog.mappy.com/Leaflet-active-area/examples/index.html"&gt;page d’exemple&lt;/a&gt;, permet d’appeler les méthodes usuelles de Leaflet telles que setView, setZoom, fitBounds tout en "centrant" la carte à partir d’une autre zone.&lt;/p&gt;
&lt;p&gt;Le principe est de définir une classe CSS, positionnée de façon absolue, qui sera prise en compte comme zone active de la carte. Ainsi, le centre de la carte sera le centre de cette zone et l’ensemble des marqueurs ou tracés y seront placés.&lt;/p&gt;
&lt;h3&gt;Disponible sous license Apache 2.0&lt;/h3&gt;
&lt;p&gt;Il nous a paru évident, utilisant une API open-source utilisée et développée par une énorme communité de développeurs, de proposer ce plugin en open-source. Il est disponible sur &lt;a href="https://github.com/Mappy/Leaflet-active-area"&gt;github&lt;/a&gt; et référencé dans &lt;a href="http://leafletjs.com/plugins.html#other-plugins-and-libraries"&gt;“la page des plugins”&lt;/a&gt; du site leaflet.&lt;/p&gt;
&lt;p&gt;A ce jour, nous avons même reçu la contribution de plusieurs développeurs hors Mappy avec l'ouverture - et l'acceptation - de 4 pull requests, la création puis la résolution de plusieurs issues. N'hésitez pas à contribuer !&lt;/p&gt;</summary><category term="Leaflet"></category><category term="OpenSource"></category><category term="French"></category><category term="JavaScript"></category></entry><entry><title>mappy.com migre vers Leaflet</title><link href="/mappy-com-migre-vers-leaflet.html" rel="alternate"></link><updated>2015-02-04T00:00:00+01:00</updated><author><name>Mappy</name></author><id>tag:,2015-02-04:mappy-com-migre-vers-leaflet.html</id><summary type="html">&lt;h1&gt;Nouvelle version du site, nouvelle cartographie&lt;/h1&gt;
&lt;p&gt;En mai 2014, une nouvelle version du site Mappy a vu le jour :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Version 4" src="images/leaflet/hp-v4.png" /&gt;&lt;/p&gt;
&lt;p&gt;Précédente version (4)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Version 5" src="images/leaflet/hp-v5.png" /&gt;&lt;/p&gt;
&lt;p&gt;Nouvelle version (5)&lt;/p&gt;
&lt;p&gt;Cette version a entraîné bon nombre de refactoring technique (comme un passage à Backbone par exemple) dont le plus impactant fût la décision de remplacer l’API cartographique JavaScript historique par &lt;a href="http://leafletjs.com/"&gt;Leaflet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Leaflet est une API de cartographie JavaScript OpenSource parmi les plus connues et actives. Utilisée par de nombreux sites importants, aussi bien généralistes (Flickr, Foursquare, Pinterest) que spécialistes de la cartographie (Mapbox, OpenStreetMap), elle dispose de plus de 175 contributeurs.&lt;/p&gt;
&lt;h2&gt;La compatibilité de la cartographie Mappy avec Leaflet&lt;/h2&gt;
&lt;p&gt;Notre plateforme cartographique dispose de certaines spécificités par rapport aux standards actuels :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;une projection &lt;a href="http://spatialreference.org/ref/esri/world-gall-stereographic/"&gt;Gall&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;des tuiles de 384 pixels de large (au lieu des 256 généralement utilisés par les autres acteurs cartographique),&lt;/li&gt;
&lt;li&gt;13 niveaux de zoom, avec un facteur 3 entre chaque niveau (au lieu de 20 niveaux et d'un facteur x2).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elles ont été intégrées sous la forme d’un plugin Leaflet, inspiré du plugin &lt;a href="https://www.mapbox.com/developers/api/"&gt;Mapbox&lt;/a&gt;. Ce plugin étend l’API Leaflet et intègre également d’autres méthodes pour effectuer des recherches géographiques, des recherches géographiques inversées (Retrouver une adresse depuis des coordonnées) et enfin des recherches d’itinéraires via les services de Mappy.&lt;/p&gt;
&lt;p&gt;Utilisée aujourd’hui par le site &lt;a href="http://www.mappy.com"&gt;fixe&lt;/a&gt;, le site &lt;a href="http://m.mappy.com"&gt;mobile&lt;/a&gt; et le widget, cette API est également distribuée aux partenaires. Si vous êtes intéressés, je vous invite à consulter &lt;a href="http://corporate.mappy.com/faq/integrez-mappy/"&gt;la page dédiée à intégration de nos services dans vos produits&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Contributions&lt;/h2&gt;
&lt;p&gt;Depuis cette migration à Leaflet, nous avons apporté quelques contributions sous la forme de “&lt;a href="https://github.com/Leaflet/Leaflet/pull/3038"&gt;pull request&lt;/a&gt;” ou de nouveau plugin (&lt;a href="https://github.com/Mappy/Leaflet-active-area"&gt;leaflet-active-area&lt;/a&gt;, un prochain article le présentera en détail).&lt;/p&gt;
&lt;h2&gt;A l’avenir&lt;/h2&gt;
&lt;p&gt;Au final, ce passage à Leaflet ne nous apporte que des avantages et nous avons hâte de proposer d’autres “pull requests” ou plugins.&lt;/p&gt;
&lt;p&gt;Autre avantage à l'utilisation de Leaflet, la migration vers des projections plus standard - un de nos projet 2015 - aura un très faible coût, et aucune migration d'API ne sera nécessaire.&lt;/p&gt;</summary><category term="Leaflet"></category><category term="OpenSource"></category><category term="French"></category><category term="JavaScript"></category></entry><entry><title>PyLR, an OpenLR decoder in python</title><link href="/PyLR,%20an%20OpenLR%20decoder%20in%20python.html" rel="alternate"></link><updated>2014-12-04T00:00:00+01:00</updated><author><name>Mappy</name></author><id>tag:,2014-12-04:PyLR, an OpenLR decoder in python.html</id><summary type="html">&lt;h1&gt;PyLR, an OpenLR decoder in python&lt;/h1&gt;
&lt;p&gt;Here, at Mappy, we have decided to release our implementation of the &lt;a href="http://www.openlr.org"&gt;OpenLR&lt;/a&gt; specification.&lt;/p&gt;
&lt;p&gt;To make a story short, OpenLR is an open source  software project launched by TomTom in september 2009. This is an attempt to provide a location referencing method that works between digital maps of different vendors or versions.&lt;/p&gt;
&lt;p&gt;We use traffic informations from 10 countries in Europe in &lt;a href="http://datex2.easyway-its.eu/content/datex"&gt;DATEX&lt;/a&gt; format, location reference was provided using the &lt;a href="https://en.wikipedia.org/wiki/Traffic_message_channel"&gt;TMC&lt;/a&gt; reference system.
The problem with TMC is that the coverage of the road network is relatively less than optimal. Because TomTom was providing information on a larger portion of the road network (in theory, the whole network could be covered) using its OpenLR scheme, we have decided to drop TMC in favor of OpenLR.&lt;/p&gt;
&lt;p&gt;The basics:&lt;/p&gt;
&lt;p&gt;OpenLR data provide paths or that must be "decoded" on the destination network (also called 'map' in the OpenLR terminology) by computing the shortest path between location reference points and a bunch of values representing the physical properties of the network at these points.&lt;/p&gt;
&lt;p&gt;So, what is PyLR ?&lt;/p&gt;
&lt;p&gt;PyLR is a partial Python implementation of the OpenLR specification largely inspired from the reference implementation in Java (available on the OpenLR site).&lt;/p&gt;
&lt;p&gt;It is partial in the sense that only parser/decoder is provided, encoding et serializing OpenLR data is not supported at the moment.&lt;/p&gt;
&lt;p&gt;While still a work in progress, it is actually used in production here at Mappy.
For information, our implementation fail to decode less than 1% of the collected traffic situations, which correspond mostly to mismatched data with our network database.&lt;/p&gt;
&lt;p&gt;PyLR implement a decoder from the binary/base64 data representation (xml is not handled at the moment). It implements also a decoder that use an abstract representationof the targeted map.&lt;/p&gt;
&lt;p&gt;At the moment, PyLR is not really usable out of the box: you still need to implement a concrete database and a shortest path algorithm for playing with the library.&lt;/p&gt;
&lt;p&gt;As stated before, it is a work in progress, we have plan to provide more tools for testing and playing around with the lib: stay tuned !!!!&lt;/p&gt;
&lt;p&gt;PyLR is available on &lt;a href="https://github.com/Mappy/PyLR"&gt;github&lt;/a&gt; and is released under the Apache licence, version 2.&lt;/p&gt;</summary><category term="OpenLR"></category><category term="Python"></category><category term="OpenSource"></category><category term="English"></category></entry><entry><title>Android StreetView-like 360 panorama with OpenGl</title><link href="/Android%20StreetView-like%20360%20panorama.html" rel="alternate"></link><updated>2014-08-04T00:00:00+02:00</updated><author><name>Mappy</name></author><id>tag:,2014-08-04:Android StreetView-like 360 panorama.html</id><summary type="html">&lt;p&gt;&lt;a href="http://mappy.com"&gt;Mappy&lt;/a&gt; offers StreetView-like immersive experience to explore France cities. The web interface uses a &lt;a href="http://fr.mappy.com/#/40/M1/TSearch/Snotre+dame+paris/N42.63223,-2.96266,2.35218,48.85267/Z10/"&gt;Flash player to display the cubic projections of "360" panorama images&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mappy 360 Web player" src="images/mappy_panorama_web_flash_player.png" /&gt;&lt;/p&gt;
&lt;p&gt;To provide the same feature on Android devices, we looked at existing solutions. Two we came accross were :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://krpano.com/"&gt;krpano HTML5 Viewer&lt;/a&gt; works in modern mobile browsers (&lt;a href="http://krpano.com/docu/html5/#supportedsystems"&gt;supported browsers, WebViews&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zarelaky/panoramagl-android"&gt;PanoramaGL&lt;/a&gt; Android library handles many projections (spherical, cubic and cylindrical), JSON configuration, transitions, gyroscope and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still, these two did not exactly match our needs :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Wide device support, starting with Android 2.3&lt;/strong&gt;, while &lt;a href="http://krpano.com/docu/html5/#supportedsystems"&gt;krpano&lt;/a&gt; requires latest Android browsers or &lt;code&gt;WebViews&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;StreetView-like gesture control (rotate, zoom)&lt;/strong&gt;, while &lt;a href="https://github.com/zarelaky/panoramagl-android"&gt;PanoramaGL&lt;/a&gt; handles "Pan-Rotate" as a speed vector we felt not as easy to control. It may be configurable but we didn't find out how.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Click on 3D way arrows&lt;/strong&gt;, while PanoramaGL provides hotspots with visual feedback on click. Still, these are 2D bitmap layers inside textures, as far as we understood.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Mappy 360 Web player" src="images/mappy_panorama_android_01.png" /&gt;
&lt;img alt="Mappy 360 Web player" src="images/mappy_panorama_android_02.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Available on Google Play, &lt;a href="https://play.google.com/store/apps/details?id=com.mappy.app"&gt;Mappy for Android&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's describe the main technical aspects we implemented building our own &lt;em&gt;PanoramicLib&lt;/em&gt;. &lt;/p&gt;
&lt;h1&gt;Cubic projection&lt;/h1&gt;
&lt;p&gt;To display 360 panoramas with cubic projection, we texture the inner faces of a simple cube mesh (6 square faces, 2 triangles each).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bitmap tile faces layout on a cube" src="images/panoramic_cube_01.png" /&gt;
&lt;img alt="Cube faces layout" src="images/panoramic_cube_02.png" /&gt;
&lt;img alt="Cube rotation angles names" src="images/panoramic_cube_04.png" /&gt;&lt;/p&gt;
&lt;p&gt;In the OpenGL 3D space, both cube and camera center are (x=0, y=0, z=0). The camera rotates on itself, using pitch and yaw angles. This is important because the cubic projected textures are valid only if seen from the cube center. Zoom is done just by changing the Field Of View angle (the cube mesh is not scaled).&lt;/p&gt;
&lt;p&gt;&lt;img alt="*PanoramicLib* sample using &amp;quot;target&amp;quot; textures" src="images/panoramic_cube_05.png" /&gt;
&lt;img alt="*PanoramicLib* sample using &amp;quot;target&amp;quot; textures" src="images/panoramic_cube_06.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;PanoramicLib&lt;/em&gt; sample using "target" textures for debugging&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In &lt;em&gt;PanoramicLib&lt;/em&gt; source :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PanoramicGestureListener&lt;/code&gt; class handles scroll and fling gestures to set camera orientation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PanoramicScaleGestureListener&lt;/code&gt; class handles pinch to zoom gesture.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Progressive resolution loading&lt;/h1&gt;
&lt;p&gt;Our panorama images are provided through Web services. For faster loading, low resolution bitmaps (128 * 128) are first downloaded. Higher resolutions are progressively downloaded, updating the cube faces to sharper textures. For high resolutions, faces are divided in multiple tiles of 512 * 512 pixels. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Multiple bitmap tiles per face possibilities" src="images/panoramic_cube_03.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ideally, using tiles would lower the amount of downloaded data because client application could :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download tiles only for visible faces,&lt;/li&gt;
&lt;li&gt;Download max resolution tiles only for zoomed parts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;... but we didn't push this far for now.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;PanoramicLib&lt;/em&gt; source, the &lt;code&gt;PanoramicTile&lt;/code&gt; interface is responsible for handling a bitmap tile and a tiny &lt;code&gt;PanoramicTileIdentifier&lt;/code&gt; structure describing which face of the cube the tile belongs. The "split factor" (&lt;code&gt;PanoramicTileIdentifier.getSplitFactor()&lt;/code&gt;) is number of times the face is splitted.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;splitFactor = 0 : 1 tile per face,&lt;/li&gt;
&lt;li&gt;splitFactor = 1 : 4 tiles per face,&lt;/li&gt;
&lt;li&gt;splitFactor = 2 : 16 tiles per face.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;PanoramicTileIdentifier.getPosition()&lt;/code&gt; gives the position of tile inside the face (0 is top-left).&lt;/p&gt;
&lt;p&gt;Tiles can be added any time during cube rendering. The &lt;code&gt;PanoramicCubeMesh&lt;/code&gt; will consider face, splitfactor and position to add the bitmap on to the corresponding texture. A higher split factor is considered as a higher resolution. The cube will adapt to use the tiles with the highest split factor.&lt;/p&gt;
&lt;p&gt;The face splits are not polygons. The cube mesh vertices never changes and  each face always uses only two triangles. The multiple tiles of a face are actually merged in a single texture. While resolution goes up, new texture buffers are allocated and tile bitmaps are progressively drawn inside (using &lt;code&gt;GLUtils.texSubImage2D()&lt;/code&gt;).&lt;/p&gt;
&lt;h1&gt;Interactive elements with ray-picking&lt;/h1&gt;
&lt;p&gt;To provide click-able 3D arrows as in Google StreetView and move from a panorama to a neighbor one, we needed to detect the click. In 3D space.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Picking is the task of determining which screen-rendered object a user has clicked on."&lt;/em&gt; &lt;a href="http://en.wikipedia.org/wiki/Picking"&gt;(Wikipedia)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The idea with ray-picking is to compute a 3D ray between the camera and the point the user clicked. For each polygon in the scene, you test if the ray intersects it, resolving the &lt;a href="http://en.wikipedia.org/wiki/Line%E2%80%93plane_intersection"&gt;"line-plane intersection" equation&lt;/a&gt;. The closest intersected polygon belongs to the clicked object.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ray picking diagram" src="images/ray_picking_01.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Image from &lt;a href="http://oivdoc90.vsg3d.com/content/88-picking"&gt;VSG, Visualization Science Group - Open Inventor Mentor, 2nd Edition - Volume I&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The picking code comes from &lt;a href="https://github.com/i-schuetz/Android_OpenGL_Picking"&gt;Ivan Schuetz "Android OpenGL Picking"&lt;/a&gt; GitHub project.
It refers to &lt;a href="http://android-raypick.blogspot.de/2012/04/first-i-want-to-state-this-is-my-first.html"&gt;Gregory Beauchamp "Ray picking on Android"&lt;/a&gt; article.&lt;/p&gt;
&lt;p&gt;We adaptated the code to take the picking out of the OpenGL thread. In &lt;code&gt;PanoramicLib&lt;/code&gt;, we notify the &lt;code&gt;Activy&lt;/code&gt; on way arrow click to load next panorama view. This has to run on the UI thread. &lt;/p&gt;
&lt;p&gt;In Ivan Schuetz example, ray intersect computing is done in &lt;code&gt;ExampleGLRenderer.onDrawFrame(GL10 gl)&lt;/code&gt; &lt;a href="https://github.com/i-schuetz/Android_OpenGL_Picking/blob/master/glpicking/src/com/example/glpicking/ExampleGLRenderer.java"&gt;(source)&lt;/a&gt;, calling &lt;code&gt;ExampleGLObject.draw(GL10 gl, Ray ray)&lt;/code&gt; on each scene object. Intersections are logged to Android LogCat from there &lt;a href="https://github.com/i-schuetz/Android_OpenGL_Picking/blob/master/glpicking/src/com/example/glpicking/ExampleGLObject.java"&gt;(source)&lt;/a&gt;. It runs on the OpenGL thread because it requires the OpenGL context to grab projection and modelview matrixes to compute ray and projected objects coordinates.&lt;/p&gt;
&lt;p&gt;To handle intersection computing on the UI thread, we saved the current OpenGL matrixes in a member of each &lt;code&gt;ArrowMesh&lt;/code&gt; instance, on each draw, using &lt;code&gt;MatrixGrabber&lt;/code&gt; class &lt;a href="https://github.com/i-schuetz/Android_OpenGL_Picking/blob/master/glpicking/src/com/example/glpicking/MatrixGrabber.java"&gt;(source)&lt;/a&gt;.&lt;/p&gt;</summary><category term="Android"></category><category term="panorama"></category><category term="360"></category><category term="ray-picking"></category><category term="OpenGL"></category><category term="English"></category></entry><entry><title>Super flexible GeoAutoComplete with Solr</title><link href="/Super%20flexible%20GeoAutoComplete%20with%20Solr.html" rel="alternate"></link><updated>2014-02-25T00:00:00+01:00</updated><author><name>Mappy</name></author><id>tag:,2014-02-25:Super flexible GeoAutoComplete with Solr.html</id><summary type="html">&lt;h1&gt;Super flexible GeoAutoComplete with Solr&lt;/h1&gt;
&lt;p&gt;In an inspiring article &lt;a href="http://www.cominvent.com/2012/01/25/super-flexible-autocomplete-with-solr/"&gt;Cominvent AS&lt;/a&gt; presented us how to use &lt;a href="https://lucene.apache.org/solr/"&gt;Solr&lt;/a&gt; power to implement autocomplete feature. We are going to present you how to add a geographical component to this suggestion.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download and unpack Solr if you have not already &lt;a href="http://www.apache.org/dyn/closer.cgi/lucene/solr/"&gt;http://www.apache.org/dyn/closer.cgi/lucene/solr/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download and unpack &lt;a href="/resources/mappy-autocomplete.zip"&gt;mappy-geoautocomplete.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cd to the autocomplete folder, open README.TXT and follow the instructions. When done you will have Solr up and running with the example data indexed into the “acgeo” core.&lt;/li&gt;
&lt;li&gt;When you browse to http://localhost:8000/ and start typing, you will see a map and countries and cities suggested&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As ranking factor, we use a combination of the population of the countries and cities, the textual relevancy and, that is the main point of our article, the proximity to the center of the map we display.
As the use of population and text relevancy has been explained in &lt;a href="http://www.cominvent.com/2012/01/25/super-flexible-autocomplete-with-solr/"&gt;Cominvent As&lt;/a&gt; article, let's focus on the geographical part of the score.
First we need to store the coordinates for each city and country. Thus we add longitude (lng) and latitude (lat) fields in our schema.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lng&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;float&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;indexed=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;stored=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;omitNorms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lat&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;float&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;indexed=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;stored=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;omitNorms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we need to modify solrconfig.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;requestHandler&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;solr.SearchHandler&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;acgeo&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;default=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;lst&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;defaults&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;defType&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;edismax&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;10&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fl&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;*,score&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qf&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;name^30 textng^50.0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pf&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;textnge^50.0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bf&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;product(log(sum(population,1)),100)^20&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Define relative importance between types. May be overridden per request by e.g. &amp;amp;personboost=120 --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;product(product(map(query($type1query),0,0,1,$type1boost),map(query($type2query),0,0,1,$type2boost),map(query($type3query),0,0,1,$type3boost),map(query($type4query),0,0,1,$type4boost),$typeboost), geoboost($eps,$mu,$lat_min,$lng_min,$lat_max,$lng_max,lat,lng))&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;typeboost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1.0&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type1query&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;type:&amp;quot;Countries&amp;quot;&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type1boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.9&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type2query&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;type:&amp;quot;Cities&amp;quot;&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type2boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.5&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type3query&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;type:&amp;quot;NA&amp;quot;&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type3boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.0&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type4query&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;type:&amp;quot;NA&amp;quot;&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type4boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.0&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lng_min&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lat_min&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lng_max&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lat_max&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;eps&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.1&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mu&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1.0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;debugQuery&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/requestHandler&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that our Solr is prepared to manage request with coordinates, we obviously have to send it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://localhost:8983/solr/acgeo/select?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;delay&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;dataType&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;jsonp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;term&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;wt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;json.wrf&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;callback&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;lat_min&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBounds&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getSouth&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;lat_max&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBounds&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getNorth&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;lng_min&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBounds&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getWest&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;lng_max&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBounds&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getEast&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even if Solr &lt;a href="http://wiki.apache.org/solr/FunctionQuery"&gt;FunctionQuery&lt;/a&gt; gives us a set of possibility, it may not fit our particular needs. In that case we can easily extend the list of available functions by writing our own in Java. Let's implement a &lt;code&gt;geoboost&lt;/code&gt; function that is equal to &lt;code&gt;1&lt;/code&gt; inside a given bounding box, and that is decreasing until &lt;code&gt;epsilon&lt;/code&gt; outside the bounding box. The decreasing speed is configurable via parameter &lt;code&gt;mu&lt;/code&gt; (A plot of this function is available &lt;a href="/images/geoboost.png"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;geoboost(epsilon, mu, lat_min, lng_min, lat_max, lng_max)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have to write a parser (i.e. a class implementing &lt;a href="http://wiki.apache.org/solr/SolrPlugins#ValueSourceParser"&gt;org.apache.solr.search.ValueSourceParser&lt;/a&gt; that reads the value from the left to the right)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GeoBoostValueParser&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ValueSourceParser&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FunctionQParser&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;SyntaxError&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lngmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lngmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseValueSource&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseValueSource&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GeoBoostFunction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;latmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lngmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;latmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lngmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the class that does the real job, where the result is returned by &lt;code&gt;public FunctionValues getValues()&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GeoBoostFunction&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lngmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lngmax&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;GeoBoostFunction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lngmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lngmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;    
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@Override&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;FunctionValues&lt;/span&gt; &lt;span class="nf"&gt;getValues&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AtomicReaderContext&lt;/span&gt; &lt;span class="n"&gt;readerContext&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FloatDocValues&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;@Override&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;floatVal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latvals&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lngvals&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;//class GeoBoostFunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the function and parser are written and compiled, we register the function in the sorlconfig.xml by adding the path to our *.jar and specifying our parser.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;config&amp;gt;&lt;/span&gt;
    ...
    &lt;span class="nt"&gt;&amp;lt;lib&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lib/lbs-geoboost.jar&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;valueSourceParser&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;geoboost&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.mappy.lbs.solr.search.function.GeoBoostValueParser&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/config&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can run and test our configuration.&lt;/p&gt;
&lt;p&gt;Using the default bounding box value (0,0,0,0) &lt;code&gt;http://127.0.0.1:8983/solr/acgeo/select?q=pa&amp;amp;wt=json&amp;amp;&lt;/code&gt; leads to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;numFound&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;docs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pakistan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;São Paulo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paraguay&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Papua New Guinea&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Palestine&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Panama&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Patna&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Palembang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Padang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using a bounding box around Paris &lt;code&gt;http://127.0.0.1:8983/solr/acgeo/select?q=pa&amp;amp;wt=json&amp;amp;lat_min=48&amp;amp;lat_max=48.5&amp;amp;lng_min=2&amp;amp;lng_max=2.5&lt;/code&gt; leads to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;numFound&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;docs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sant Andreu de Palomar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pakistan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Palma&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;São Paulo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paraguay&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Papua New Guinea&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Palestine&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Panama&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Patna&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
             &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Solr"></category><category term="OpenSource"></category><category term="English"></category></entry><entry><title>Mappy et Oslandia vers l'OpenSource</title><link href="/Mappy%20et%20Oslandia%20vers%20l'OpenSource.html" rel="alternate"></link><updated>2014-02-11T00:00:00+01:00</updated><author><name>Mappy</name></author><id>tag:,2014-02-11:Mappy et Oslandia vers l'OpenSource.html</id><summary type="html">&lt;p&gt;Paris, le 11 février 2014. &lt;/p&gt;
&lt;p&gt;Depuis plus de deux ans, Oslandia accompagne Mappy dans sa transition vers l’OpenSource. La première étape est symbolisée par le projet de migration des bases de données Oracle du backoffice cartographique vers PostGIS. Celui-ci vient notamment d’être finalisé et fonctionne actuellement en production.&lt;/p&gt;
&lt;p&gt;Mappy propose des services de calcul d’itinéraire et de cartographie. Supportant plusieurs milliards de requêtes par mois, la plateforme LBS (Location Based Services) est au cœur de l’activité de Mappy et sert de socle aux nouveaux produits tel que le Web To Store.&lt;/p&gt;
&lt;p&gt;Oslandia travaille conjointement avec Mappy pour migrer cette plateforme cartographique d’une solution développée en interne, vers une solution basée entièrement sur des logiciels libres, afin de préparer les défis techniques et opérationnels à venir.&lt;/p&gt;
&lt;p&gt;Les backoffices de préparation des données et de création du plan cartographique ont été entièrement migrés avec succès.&lt;/p&gt;
&lt;p&gt;Cette pile applicative était initialement basée sur Oracle Spatial, SQL Server, et des outils internes non standards de création de carte. Elle n’utilise plus désormais que des composants OpenSource.&lt;/p&gt;
&lt;p&gt;Oracle et SQL Server ont été entièrement remplacés par PostgreSQL et PostGIS, qui constitue le socle de base de données géographique pour le stockage et le prétraitement des données géographiques. Mapnik, Python, Tornado, Varnish, MemCached, Debian sont les autres composants OpenSource utilisés.&lt;/p&gt;
&lt;p&gt;La migration vers ces composants OpenSource a permis de rationnaliser et d’optimiser l’architecture du composant « carte »:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Temps de traitement des données réduit &lt;/li&gt;
&lt;li&gt;Standardisation des formats et API&lt;/li&gt;
&lt;li&gt;Forte diminution de la dette technique&lt;/li&gt;
&lt;li&gt;Nombre de lignes de code optimisé&lt;/li&gt;
&lt;li&gt;Baisse du coût de la plateforme, et passage à l’échelle plus économique&lt;/li&gt;
&lt;li&gt;Montée en compétence et motivation des équipes&lt;/li&gt;
&lt;li&gt;Maîtrise complète des outils&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oslandia a permis à Mappy d’intégrer la culture et les méthodes de l’OpenSource dans ses équipes, et leur a fourni les compétences techniques nécessaires pour mettre en place cette architecture à forte charge. Les compétences d’Oslandia en systèmes d’information géographique, et son expertise unique en France sur PostGIS, ont permis de mener à bien ce projet.&lt;/p&gt;
&lt;p&gt;Mappy a ainsi pu bénéficier des dernières technologies OpenSource à la pointe de l’état de l’art, et également pu contribuer à certains projets libres comme Mapnik.&lt;/p&gt;
&lt;p&gt;PostGIS, la base de données géographique supportant toute l’infrastructure, a permis d’atteindre de très hautes performances et un niveau fonctionnel élevé.&lt;/p&gt;
&lt;p&gt;La base de 75Go bénéficie des toutes dernières avancées de PostgreSQL et PostGIS, tels que la réplication au fil de l’eau, les nouvelles fonctions géographiques de PostGIS, les requêtes CTE récursives, le support de JSON et bien plus.&lt;/p&gt;
&lt;p&gt;Audrey Malherbe, responsable du projet chez Mappy, souligne que le choix de PostgreSQL et de PostGIS était une évidence : &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;« Nous voulions basculer dans l’OpenSource en nous appuyant sur des technologies performantes et reconnues comme PostGIS. Il était important pour nous de contribuer à l’OpenSource et l’expertise technique d’Oslandia et son implication dans la communauté nous ont permis de nous lancer dans cette aventure en toute confiance. »&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mappy a l’intention de continuer ce virage vers l’OpenSource et d’étendre la méthode de migration aux autres services de la plateforme cartographique.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;À propos de Mappy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spécialiste du calcul d’itinéraire et des services de cartographie, Mappy est reconnu comme le leader français de la recherche locale par la carte, sur Internet, tablettes, mobiles et GPS.&lt;/p&gt;
&lt;p&gt;Mappy propose à ses utilisateurs trois types de recherche : la recherche par le plan, qui permet de visualiser un quartier, de s’immerger dans la ville  grâce aux vues 360° dans 320 villes françaises, mais également de pousser la porte de plusieurs milliers de commerces ; la recherche d’itinéraires disponible pour les déplacements en voiture, en transports en commun, en vélo et en mode piéton ; enfin la recherche de produits, permettant de localiser un produit précis, dans une zone géographique donnée, de connaître son prix et sa disponibilité.&lt;/p&gt;
&lt;p&gt;Acteur majeur du déplacement urbain, Mappy propose aux annonceurs une solution géolocalisée sur l’ensemble du territoire, facilitant les dispositifs web-to-store et la génération de trafic vers leurs points de vente.&lt;/p&gt;
&lt;p&gt;Mappy compte aujourd’hui plus de 10 millions d’utilisateurs mensuels sur Internet, tablettes et mobiles (Mappy et MappyGPS Free).&lt;/p&gt;
&lt;p&gt;Mappy est une filiale à 100% de Solocal Group. &lt;a href="http://www.mappy.com"&gt;http://www.mappy.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;À propos d’Oslandia&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Oslandia est une ENL (Entreprise du Numérique Libre) Française spécialisée en systèmes d’information géographique (SIG) Open Source, et particulièrement en bases de données spatiales, Web Services OGC et SIG bureautiques. Oslandia propose une offre de service complète : conseil, audit, développement, support, formation.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.oslandia.com"&gt;http://www.oslandia.com&lt;/a&gt; &lt;/p&gt;</summary><category term="French"></category><category term="Mapnik"></category><category term="PostGIS"></category><category term="OpenSource"></category></entry><entry><title>FOSS4G 2013 : Mappy-ing OpenSource</title><link href="/FOSS4G%202013%20:%20Mappy-ing%20Open%20Source.html" rel="alternate"></link><updated>2013-09-25T00:00:00+02:00</updated><author><name>Mappy</name></author><id>tag:,2013-09-25:FOSS4G 2013 : Mappy-ing Open Source.html</id><summary type="html">&lt;p&gt;&lt;img alt="Foss4g2013" src="images/foss4g2013.png" /&gt;&lt;/p&gt;
&lt;p&gt;The presentation of our work on map service at &lt;a href="http://2013.foss4g.org/"&gt;Foss4G2013&lt;/a&gt; in Notthingham&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="www.mappy.com"&gt;Mappy&lt;/a&gt; is an online mapping company based in France and fully-owned by Solocal Group (&lt;a href="www.pagesjaunes.fr"&gt;PagesJaunes&lt;/a&gt;). Mappy was the pioneer in online mapping in France, and holds a significant market share in France and Belgium (about 10 millions monthly users). The company has developed an home-made LBS platform since 1998. The mapping service delivers 100 millions tiles a day. At the beginning of 2012, Mappy decided to redesign its core mapping service to meet new business challenges. The company needed a more standard and open source solution. Developers and product managers have fallen in love with &lt;a href="www.mapnik.org"&gt;Mapnik&lt;/a&gt; (some for code and performance, others for the map display quality). The team made the decision to build the new mapping service around Mapnik and others open source tools like PostGIS. The project was challenging : we switched from a MSSqlServer database/home made mapping engine/Windows architecture to a postgis database/mapnik engine/Linux one. During the development, we've seen and appreciated the energy around Mapnik and we started to gradually dive into code and contribute to some features. This talk will present a feedback on the overhaul : the functional and technical challenges, the decision to contribute to Mapnik project, the release of this service, its performance and the future roadmap.&lt;/p&gt;
&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/26407067" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="https://www.slideshare.net/AudreyMalherbe/foss42013-mappying-opensource" title="Foss4G2013 Mappy-ing Open Source" target="_blank"&gt;&lt;/div&gt;&lt;/p&gt;</summary><category term="English"></category><category term="Mapnik"></category><category term="PostGIS"></category><category term="OpenSource"></category></entry></feed>