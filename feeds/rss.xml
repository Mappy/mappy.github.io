<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mappy Labs</title><link href="https://techblog.mappy.com/" rel="alternate"></link><link href="https://techblog.mappy.com/feeds/rss.xml" rel="self"></link><id>https://techblog.mappy.com/</id><updated>2018-05-18T00:00:00+02:00</updated><entry><title>Automatiser vos relevés de webperfs</title><link href="https://techblog.mappy.com/webperfs-sitespeed.html" rel="alternate"></link><published>2018-05-18T00:00:00+02:00</published><updated>2018-05-18T00:00:00+02:00</updated><author><name>Nicolas Bétheuil, Manuel Emeriau, Jonathan Saget, Grégory Paul</name></author><id>tag:techblog.mappy.com,2018-05-18:/webperfs-sitespeed.html</id><summary type="html">&lt;p&gt;Comment nous avons automatisé le lancement de mesures de performances web.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;La Performance Web chez Mappy&lt;/h2&gt;
&lt;p&gt;Nous surveillons depuis longtemps la performance web (couramment abrégé « webperf ») sur le site &lt;a href="https://fr.mappy.com/"&gt;mappy&lt;/a&gt; mais l’évolution des usages a mis ce sujet en haut de nos priorités.&lt;/p&gt;
&lt;p&gt;L’usage du site a en effet changé ces dernières années avec de plus en plus de visites depuis des navigateurs mobiles.&lt;/p&gt;
&lt;p&gt;Selon &lt;a href="http://gs.statcounter.com/platform-market-share/desktop-mobile/france/#yearly-2016-2018"&gt;statcounter&lt;/a&gt;, l’audience mobile en France est passée de ~23 % en 2016 à ~38 % en 2018 :&lt;/p&gt;
&lt;p&gt;&lt;img alt="statistiques mobile versus bureau" src="images/web/webperfs/stats-mobile-2018.png"&gt;&lt;/p&gt;
&lt;p&gt;Ainsi, un temps de chargement acceptable depuis un navigateur de « bureau » hier ne l’est plus forcément depuis un téléphone mobile avec une connexion cellulaire moyenne aujourd’hui.&lt;/p&gt;
&lt;p&gt;Par ailleurs, Google a &lt;a href="https://webmasters.googleblog.com/2016/11/mobile-first-indexing.html"&gt;annoncé la modification de son index&lt;/a&gt; pour se baser sur les sites mobiles en priorité et tient &lt;a href="https://webmasters.googleblog.com/2018/01/using-page-speed-in-mobile-search.html"&gt;compte de leur vitesse de chargement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nous avons mené plusieurs actions récemment pour améliorer la vitesse de chargement en commençant par la mise en place de mesure automatisée puis un cycle itératif entre des actions de performances web et la vérification de leur impact.&lt;/p&gt;
&lt;h2&gt;Des mesures automatisées&lt;/h2&gt;
&lt;h3&gt;Via WebPageTest&lt;/h3&gt;
&lt;p&gt;&lt;img alt="WebPageTest" src="images/web/webperfs/webpagetest.png"&gt;&lt;/p&gt;
&lt;p&gt;Nous utilisons &lt;a href="https://www.webpagetest.org"&gt;WebPageTest&lt;/a&gt; depuis 2015 à travers une installation locale.&lt;/p&gt;
&lt;p&gt;Cet outil nous donnait satisfaction mais avec 2 contraintes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n’ayant pas trouvé de solution simple, nous notions manuellement chaque semaine certaines valeurs (speed index, temps de chargement, taille de la page) sur un tableau partagé,&lt;/li&gt;
&lt;li&gt;son installation, notamment pour maintenant lancer des tests sur des téléphones mobiles, est loin d’être une &lt;a href="https://github.com/WPO-Foundation/webpagetest-docs/blob/master/user/Private%20Instances/README.md"&gt;partie&lt;/a&gt; &lt;a href="https://sites.google.com/a/webpagetest.org/docs/private-instances/locations"&gt;de&lt;/a&gt; &lt;a href="https://github.com/WPO-Foundation/webpagetest-docs/blob/master/user/Private%20Instances/wptdriver.md"&gt;plaisir&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WebPageTest n’étant pas idéal pour nos besoins (automatisation du relevé des métriques et lancement sur navigateurs mobiles), nous avons donc comparé WebPageTest avec &lt;a href="https://developers.google.com/web/tools/lighthouse/"&gt;LightHouse&lt;/a&gt;, &lt;a href="https://www.sitespeed.io/"&gt;SiteSpeed&lt;/a&gt; et &lt;a href="https://www.npmjs.com/package/phantomas"&gt;Phantomas&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nous utilisions déjà Phantomas pour vérifier que certains indicateurs de performance ne régressent pas (taille et nombres des JS/CSS, compression &lt;code&gt;gzip&lt;/code&gt;, etc).&lt;/p&gt;
&lt;p&gt;Le W3C a d’ailleurs standardisé une API (&lt;a href="https://www.w3.org/TR/navigation-timing/#process"&gt;Navigation Timing API&lt;/a&gt;) permettant de recueillir une quantité assez impressionnante de métriques au sein du navigateur :
&lt;img alt="Timing overview" src="images/web/webperfs/timing-overview.png"&gt;&lt;/p&gt;
&lt;p&gt;Voici la matrice que nous avons utilisée pour prendre notre décision quant aux métriques que proposent ces outils :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Timing overview" src="images/web/webperfs/decision-matrix.png"&gt;&lt;/p&gt;
&lt;h3&gt;Et maintenant SiteSpeed&lt;/h3&gt;
&lt;p&gt;&lt;img alt="SiteSpeed" src="images/web/webperfs/sitespeed.png"&gt;&lt;/p&gt;
&lt;p&gt;Nous avons au final porté notre choix sur SiteSpeed pour les raisons suivantes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;il s’installe très facilement via &lt;a href="https://www.sitespeed.io/documentation/sitespeed.io/installation/#docker"&gt;Docker&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;il se lance en simulant un environnement mobile (taille du navigateur et bridage de la connexion),&lt;/li&gt;
&lt;li&gt;il effectue les métriques que nous jugeons nécessaires, ainsi que des rapports détaillés incluant une vidéo du chargement de la page comme le fait WebPageTest (&lt;a href="https://examples.sitespeed.io/6.0/2017-11-23-23-43-35/"&gt;exemple de rapport&lt;/a&gt; et d’&lt;a href="https://examples.sitespeed.io/6.0/2017-11-23-23-43-35/pages/en.wikipedia.org/wiki/Main_Page/index.html#browsertime"&gt;une vidéo&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;il permet facilement d’exporter des graphiques à mettre sur notre « wall » (écran de supervision des métriques du site web).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il ne restait plus qu’à programmer le lancement de SiteSpeed toutes les heures sur nos différents environnements et sur quelques pages de notre site.&lt;/p&gt;
&lt;p&gt;Après un tir, SiteSpeed peut envoyer les métriques dans &lt;a href="https://grafana.com/"&gt;grafana&lt;/a&gt;, un outil de visualisation de données (&lt;code&gt;dataviz&lt;/code&gt;).
Cela nous permet de générer un graphique présentant la moyenne des « speed index » sur notre « wall » pour suivre son évolution :&lt;/p&gt;
&lt;p&gt;&lt;img alt="métriques" src="images/web/webperfs/wall.png"&gt;&lt;/p&gt;
&lt;p&gt;Ceci est une synthèse mais de nombreux autres graphiques sont disponibles :&lt;/p&gt;
&lt;p&gt;&lt;img alt="grafana" src="images/web/webperfs/grafana.png"&gt;&lt;/p&gt;
&lt;p&gt;Vous pouvez découvrir un &lt;a href="https://dashboard.sitespeed.io/d/000000043/page-summary?orgId=1"&gt;exemple intéractif testant wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cette première étape finalisée, il est temps de passer aux optimisations, qui feront l’objet de prochains articles.&lt;/p&gt;</content><category term="français"></category><category term="javascript"></category><category term="webperfs"></category></entry><entry><title>Backbone isomorphique maison : comment ?</title><link href="https://techblog.mappy.com/comment-backbone-isomorphique.html" rel="alternate"></link><published>2018-01-31T00:00:00+01:00</published><updated>2018-01-31T00:00:00+01:00</updated><author><name>Nicolas Bétheuil, Grégory Paul, Manuel Emeriau</name></author><id>tag:techblog.mappy.com,2018-01-31:/comment-backbone-isomorphique.html</id><summary type="html">&lt;p&gt;Comment a t'on réécrit une librairie isomorphique Backbone maison ?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cet article fait écho a &lt;a href="/pourquoi-backbone-isomorphique.html"&gt;Backbone isomorphique maison : pourquoi ?&lt;/a&gt; Celui-ci va présenter comment AMIB a été construit.&lt;/p&gt;
&lt;p&gt;La première difficulté était déjà de définir l'attendu et le code que nous souhaitions écrire. Nous n'avons pas commencé par les tests contrairement à nos habitudes. Notre objectif était de mesurer rapidement si nous étions sur une piste intéressante, pour éventuellement l'abandonner et éviter de gaspiller notre temps.&lt;/p&gt;
&lt;p&gt;Nous savions que les interactions allaient se présenter de cette manière
&lt;img alt="première idée" src="/images/javascript/use-case.png"&gt;&lt;/p&gt;
&lt;p&gt;Nous avons donc commencé par écrire :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Mappy/amib/blob/73ac67cb25f336374a03cf26745d99f80667f927/fixtures/recursive-children-view/RecursiveChildrenView.js"&gt;notre première vue&lt;/a&gt; que nous avons rapidement étoffée&lt;/li&gt;
&lt;li&gt;pour avoir un modèle et un enfant,&lt;/li&gt;
&lt;li&gt;puis avec &lt;a href="https://github.com/Mappy/amib/blob/73ac67cb25f336374a03cf26745d99f80667f927/fixtures/multiple-children-view/MultipleChildrenView.js"&gt;plusieurs enfants&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;puis avec un enfant &lt;a href="https://github.com/Mappy/amib/blob/master/fixtures/one-children-with-model/no-children-with-promise-model/NoChildrenWithPromiseModelView.js"&gt;avec un modèle asynchrone&lt;/a&gt;, on appelle ça une &lt;a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Promise"&gt;promesse&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L'intérêt de faire fonctionner ce moteur de rendu avec des modèles asynchrones est très simple : nous consommons des services pour afficher les résolutions d'itinéraire, on utilise pour cela des requêtes HTTP, AJAX côté client &amp;amp; &lt;code&gt;request&lt;/code&gt; côté serveur. Nous devions donc gérer l'asynchronisme de ces requêtes.&lt;/p&gt;
&lt;p&gt;La copie d'écran annotée en bleu ci-dessous montre l'imbrication des composants entre eux.
&lt;img alt="composants" src="/images/javascript/component.png"&gt;&lt;/p&gt;
&lt;p&gt;Comme Backbone ne fonctionne pas sous NodeJS à cause de sa dépendance avec JQuery (et l'usage du DOM), nous avons &lt;a href="https://github.com/Mappy/amib/blob/73ac67cb25f336374a03cf26745d99f80667f927/nodify-backbone.js"&gt;surchargé/bouchonné les méthodes voulues&lt;/a&gt;. Nous avons donc pu exécuter une vue Backbone côté serveur. L'astuce de la &lt;a href="http://backbonejs.org/docs/backbone.html#section-162"&gt;ré-implémentation de setElement&lt;/a&gt; permet d'avoir la même interface de sortie. La différence porte juste sur la manière de retourner la vue Backbone afin qu'elle soit &lt;a href="https://github.com/Mappy/amib/blob/73ac67cb25f336374a03cf26745d99f80667f927/render.js#L164"&gt;ajoutée soit au DOM dans le navigateur&lt;/a&gt; soit &lt;a href="https://github.com/Mappy/amib/blob/73ac67cb25f336374a03cf26745d99f80667f927/render.js#L148"&gt;dans la réponse sous NodeJS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nos gabaris/modèles (templates) sont des fichiers twig, l'idée est simplement d'importer ceux-ci en tant qu'objet twig via &lt;a href="https://github.com/Mappy/amib/blob/73ac67cb25f336374a03cf26745d99f80667f927/node-twigify.js"&gt;cette magie&lt;/a&gt; et voilà.&lt;/p&gt;
&lt;p&gt;Vous pouvez voir l'usage &lt;a href="https://github.com/Mappy/amib/blob/73ac67cb25f336374a03cf26745d99f80667f927/renderToDom.client.spec.js#L39"&gt;côté client&lt;/a&gt; ou &lt;a href="https://github.com/Mappy/amib/blob/master/renderToString.server.spec.js#L23"&gt;côté serveur&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ci-dessous les exemples de la vraie vie :&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fr.mappy.com/itineraire/paris/lyon"&gt;Sans JS : en mode SEO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sans JS : en mode SEO" src="/images/javascript/isomorph-no-js.png.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fr.mappy.com/#/13/M2/TItinerary/IFRParis%2075001-75116|TOLyon%2069001-69009|MOvoiture|PRcar|RI0/N151.12061,6.11309,3.59153,47.33409/Z4/"&gt;Avec JS : en mode interaction utilisateur&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Avec JS : en mode interaction utilisateur" src="/images/javascript/isomorph-w-js.png"&gt;&lt;/p&gt;
&lt;p&gt;Vous pouvez noter de subtiles différences : l'absence de carte ou de barre de catégories en version SEO.&lt;/p&gt;
&lt;p&gt;Comme vous l'avez peut-être compris, nous avons investi un peu de temps dans ce moteur de rendu. C'est une expérience très intéressante qui montre comment, en posant clairement un problème, en le découpant en plus petites cibles atteignables, on peut réussir à contruire quelque chose simple d'usage.&lt;/p&gt;
&lt;p&gt;Les objectifs de ce changement d'architecture étaient multiples : ne pas tout remettre en cause, évoluer sereinement vers une autre structure afin d'atteindre les ambitions stratégiques du produit.
Les changements apportés n'ont ont permis de livrer un code plus stable, plus facile à maintenir, plus testable donc plus couvert (de test unitaire).&lt;/p&gt;</content><category term="français"></category><category term="JavaScript"></category><category term="NodeJS"></category><category term="Backbone"></category></entry><entry><title>Backbone isomorphique maison : pourquoi ?</title><link href="https://techblog.mappy.com/pourquoi-backbone-isomorphique.html" rel="alternate"></link><published>2018-01-10T00:00:00+01:00</published><updated>2018-01-10T00:00:00+01:00</updated><author><name>Nicolas Bétheuil</name></author><id>tag:techblog.mappy.com,2018-01-10:/pourquoi-backbone-isomorphique.html</id><summary type="html">&lt;p&gt;Pourquoi-a-t'on réécrit une librairie isomorphique basée sur backbone ?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vous l'avez peut-être remarqué, nous avons refait une partie du site il y a bien six mois maintenant : les itinéraires. Nous appelons cela le multipath (prononcer &lt;a href="https://www.anglaisfacile.com/exercices/exercice-anglais-2/exercice-anglais-66477.php"&gt;moultipaðe&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Petit tour du propriétaire : vous pouvez dorénavant pour une recherche d'itinéraire avoir les réponses dans plusieurs modes de transport : voiture (évidemment), bus, car, taxi, VTC, transport en commun, à pied ... et beaucoup d'autres modes suivront.&lt;/p&gt;
&lt;p&gt;Comme pour n'importe quelle partie du site : le &lt;a href="https://www.wikiwand.com/fr/Optimisation_pour_les_moteurs_de_recherche"&gt;SEO&lt;/a&gt; est une exigence forte. Nos pages doivent répondre de la même manière pour un moteur de recherche que pour une navigation utilisateur classique.&lt;/p&gt;
&lt;p&gt;Lors de la &lt;a href="http://techblog.mappy.com/mappy-com-de-php-a-nodejs.html"&gt;migration de PHP vers NodeJS&lt;/a&gt; réalisée l'année dernière, une architecture a été posée avec une séparation nette entre la partie serveur sous &lt;code&gt;express&lt;/code&gt; et la partie cliente pilotant des vues &lt;code&gt;Backbone&lt;/code&gt;. Cela impliquait notamment deux manières complètement différentes de récupérer la donnée avant de rendre la vue. Nous souhaitions explorer d'autres pistes pour faire évoluer l'architecture sans tout refondre. La piste de l'isomorphisme a alors été suivie pour uniformiser cette récupération de donnée. Nous souhaitions également suivre de manière plus rigoureuse le design MV de backbone.&lt;/p&gt;
&lt;p&gt;Une autre contrainte était la courbe d'apprentissage et le délai que nous avions pour faire cette évolution stratégique du produit Mappy. Nous étions une équipe de cinq développeurs, les autres connaissaient déjà &lt;a href="http://backbonejs.org/"&gt;backbone&lt;/a&gt; et j'arrivais avec plus de connaissances sur &lt;a href="https://reactjs.org/"&gt;ReactJS&lt;/a&gt; et la refonte d'un autre site en isomorphique.&lt;/p&gt;
&lt;p&gt;Pour des raisons de "time to market", nous ne souhaitions pas migrer tout le site vers React. Par ailleurs, l’ajouter en plus de backbone, avec son ecosystème et ses ~40Kb minifiés &amp;amp; compressés était problèmatique pour des raisons de performance, notamment en mobile.&lt;/p&gt;
&lt;p&gt;L'idée était donc d'apporter une réponse proportionnée, adéquate, co-construite et réfléchie sans tout remettre en cause : l'architecture, les compétences de l'équipe et l'ambition stratégique du produit.&lt;/p&gt;
&lt;p&gt;Nous avons donc décidé de suivre cette voie de manière itérative. Tout d'abord par un POC (Proof Of Concept) puis par une intégration progressive dans les composants développés en s'attaquant à la plus grosse difficulté suivante.&lt;/p&gt;
&lt;p&gt;Nous avons commencé par un POC le 24 avril 2017 : en moins d'une semaine, nous avions une première version fonctionnelle qui montrait comment faire communiquer les composants entre eux avec un code applicatif identique entre la version cliente et serveur. Les nuances clients vs serveur étaient localisées dans ce que nous avons appelé plus tard AMIB pour Asynchronous Mappy Isomorphic Backbone. Le 11 mai, après avoir validé AMIB de façon collégiale en réunion technique, nous avons fusionné cette première version de travail fonctionnelle dans la branche principale ce qui a permis de partager le travail d'implémentation des vues avec les autres membres de l'équipe.&lt;/p&gt;
&lt;p&gt;Chez Mappy, nous avons la possibilité d'essayer, d'apprendre, d'expérimenter. On travaille ensemble à définir des objectifs, des modes de collaboration, des jalons, des étapes pour satisfaire les besoins qui nous sont exprimés.&lt;/p&gt;
&lt;p&gt;PS : Pour plus de notions / culture / références sur l'isomorphisme ... je vous laisse vous documenter si vous désirez en savoir plus : &lt;a href="https://medium.com/airbnb-engineering/isomorphic-javascript-the-future-of-web-apps-10882b7a2ebc"&gt;chez Airbnb&lt;/a&gt; ou &lt;a href="http://tech.m6web.fr/isomorphic-single-page-app-parfaite-react-flux/"&gt;chez M6&lt;/a&gt;.&lt;/p&gt;</content><category term="français"></category><category term="JavaScript"></category><category term="NodeJS"></category><category term="backbone"></category></entry><entry><title>mappy.com : de PHP à node.js</title><link href="https://techblog.mappy.com/mappy-com-de-php-a-nodejs.html" rel="alternate"></link><published>2017-01-26T00:00:00+01:00</published><updated>2017-01-26T00:00:00+01:00</updated><author><name>Grégory Paul</name></author><id>tag:techblog.mappy.com,2017-01-26:/mappy-com-de-php-a-nodejs.html</id><summary type="html">&lt;p&gt;Cet article présente la migration du site mappy.com de PHP à node.js&lt;/p&gt;</summary><content type="html">&lt;p&gt;Depuis quelques jours, le site web &lt;a href="https://fr.mappy.com/"&gt;mappy.com&lt;/a&gt; est entièrement servi par &lt;code&gt;node.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Historiquement sous &lt;code&gt;PHP&lt;/code&gt; et &lt;a href="https://symfony.com/"&gt;Symfony 2&lt;/a&gt;, une stratégie de migration a été mise en place pour migrer les serveurs web, page par page, vers &lt;code&gt;node.js&lt;/code&gt; et &lt;a href="http://expressjs.com/"&gt;express&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="php vers node" src="images/javascript/php-to-node.png"&gt;&lt;/p&gt;
&lt;h1&gt;Le site Web Mappy&lt;/h1&gt;
&lt;p&gt;Mappy est une « &lt;a href="https://fr.wikipedia.org/wiki/Application_web_monopage"&gt;single page application&lt;/a&gt; » qui se compose en 2 parties :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;une partie serveur, composée de pages HTML et de feuilles de style, majoritairement dédiées aux moteurs de recherche (&lt;a href="https://fr.wikipedia.org/wiki/Optimisation_pour_les_moteurs_de_recherche"&gt;SEO&lt;/a&gt;), afin de leur présenter les informations accessibles via l’application Web cliente,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;une partie cliente composée de JavaScript et s’exécutant dans le navigateur qui permet d’ajouter toute l’interactivité au site (notamment les interactions avec la carte, ce qui évite les rechargements de page après action de l’utilisateur).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ces parties serveur et cliente font appel aux nombreuses APIs &lt;a href="https://fr.wikipedia.org/wiki/Representational_State_Transfer"&gt;REST&lt;/a&gt; de Mappy afin de répondre aux besoins des internautes : service de recherche, de suggestion, de points d’intérêt (comme les commerces, hôtels, restaurants, etc), de calculs d’itinéraires, de statistiques, etc.
Ces services sont écrits dans différents autres langages adaptés à chacune de leur problématique (et ne seront pas traités dans le cadre de cet article).&lt;/p&gt;
&lt;h3&gt;Site sans JavaScript activé (pour le SEO)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="sans javascript" src="images/javascript/mappy-no-js.png"&gt;&lt;/p&gt;
&lt;h3&gt;Site avec JavaScript (pour les internautes)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="avec javascript" src="images/javascript/mappy-js.png"&gt;&lt;/p&gt;
&lt;h1&gt;Avant la migration node.js&lt;/h1&gt;
&lt;p&gt;Le site Mappy est une application Web composée d’environ 20000 lignes de code de JavaScript (sans compter les librairies) côté client (ou navigateur) et environ 11000 lignes de &lt;code&gt;PHP&lt;/code&gt; côté serveur (toujours sans compter les librairies).&lt;/p&gt;
&lt;p&gt;&lt;img alt="architecture avec PHP" src="images/javascript/portal-architecture-php.png"&gt;&lt;/p&gt;
&lt;p&gt;Le site utilise également des templates au format &lt;code&gt;twig&lt;/code&gt;, à la fois via le code JavaScript et &lt;code&gt;PHP&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Pourquoi node.js ?&lt;/h1&gt;
&lt;p&gt;La volonté de migrer le code &lt;code&gt;PHP&lt;/code&gt; vers JavaScript s’est faite pour principalement 3 raisons :&lt;/p&gt;
&lt;h2&gt;1. Même paradigme entre code client et code serveur&lt;/h2&gt;
&lt;p&gt;JavaScript est un langage asynchrone avec un système d’héritage par prototype alors que &lt;code&gt;PHP&lt;/code&gt; est un langage procédural avec un système d’héritage orienté classe.
Certaines fonctionnalités devant à la fois être disponibles côté client et à la fois côté serveur, il est nécessaire de les développer 2 fois de façon relativement différente.&lt;/p&gt;
&lt;h2&gt;2. Code partagé&lt;/h2&gt;
&lt;p&gt;Pour permettre le partage de code, nous avons, il y a quelques temps déjà, adopté &lt;code&gt;CommonJS&lt;/code&gt; pour notre code JavaScript client.
&lt;code&gt;CommonJS&lt;/code&gt; est un système de chargement de dépendances, utilisé par &lt;code&gt;node.js&lt;/code&gt;.
Nous utilisons &lt;code&gt;browserify&lt;/code&gt; pour traduire nos fichiers au format &lt;code&gt;CommonJS&lt;/code&gt; en un fichier JavaScript compréhensible par le navigateur.&lt;/p&gt;
&lt;p&gt;Environ 20 à 25 % de code est maintenant partagé, utilisé à la fois par le serveur et le client (exemple sur les pages de point d’intérêt, itinéraire, etc).&lt;/p&gt;
&lt;p&gt;Une conséquence de cela est une plus grande cohérence dans le comportement entre le serveur et le client (même traitement, même présentation des données).&lt;/p&gt;
&lt;h2&gt;3. Recrutement facilité&lt;/h2&gt;
&lt;p&gt;En éliminant &lt;code&gt;PHP&lt;/code&gt; de l’équation, le recrutement est facilité puisque nous ne recherchons que des experts en JavaScript (avec de bases solides en &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;HTML&lt;/code&gt;, performances web, &lt;code&gt;GNU/Linux&lt;/code&gt;, &lt;code&gt;puppet&lt;/code&gt;, etc).
Vous pouvez d’ailleurs consulter notre page sur &lt;a href="https://remixjobs.com/company/MAPPY/140070/informations"&gt;RemixJobs&lt;/a&gt; si vous êtes intéressé.&lt;/p&gt;
&lt;h1&gt;Après la migration vers node.js&lt;/h1&gt;
&lt;p&gt;A l’issue de la migration, le code est toujours de 20000 lignes de code côté client mais une partie d’entre elles sont partagées par le serveur (modèles et collections &lt;code&gt;Backbone&lt;/code&gt; notamment).
Le code côté serveur n’est plus que d’environ 8000 lignes (sans le code partagé).&lt;/p&gt;
&lt;p&gt;&lt;img alt="architecture avec node" src="images/javascript/portal-architecture-node.png"&gt;&lt;/p&gt;
&lt;h2&gt;Impacts sur les temps de réponse&lt;/h2&gt;
&lt;p&gt;On constate un gain du temps de réponse moyen d’environ 10 % sur l’ensemble des pages du site.
Les pages consommant le plus d’appels aux services &lt;a href="https://fr.wikipedia.org/wiki/Representational_State_Transfer"&gt;REST&lt;/a&gt; montrent le plus gros gain (comme l’affichage des pages présentant les points d’intérêts par exemple).
C’est assez logique, &lt;code&gt;node.js&lt;/code&gt; étant particulièrement adapté aux multiples entrées / sorties (réseau ou disque) de par son côté asynchrone non bloquant.&lt;/p&gt;
&lt;p&gt;Ci-dessous un exemple des temps de réponse moyen des pages présentant les points d’intérêts avant et après la migration vers &lt;code&gt;node.js&lt;/code&gt; (séparée par la ligne verte) :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Temps de réponse de la page de point d’intérêt" src="images/javascript/response-time.png"&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;La migration vers &lt;code&gt;node.js&lt;/code&gt; est un succès.&lt;/p&gt;
&lt;p&gt;Tout d’abord, l’objectif de migration transparente a été complètement respecté. Il n’y a eu aucun impact négatif, ni pour les internautes, ni pour les performances SEO.&lt;/p&gt;
&lt;p&gt;Enfin, il est maintenant beaucoup plus facile d’intervenir sur le code serveur et le développement de fonctionnalités communes est plus rapide.&lt;/p&gt;
&lt;p&gt;Le seul inconvénient de cette migration « douce » est qu’elle s’est étendue sur plusieurs mois et donc a été relativement longue (les pages migrées ont été mises en ligne au fur et à mesure, en vérifiant l’absence d’impact négatif à chaque mise en production).&lt;/p&gt;
&lt;h2&gt;Et après ?&lt;/h2&gt;
&lt;p&gt;Symfony utilisant &lt;a href="http://twig.sensiolabs.org/"&gt;twig&lt;/a&gt; comme moteur de template par défaut, tous nos templates sont dans ce format, soit environ 30000 lignes de code.
Nous utilisons d’ailleurs &lt;a href="https://github.com/Mappy/twigify"&gt;twigify&lt;/a&gt; pour les utiliser via &lt;code&gt;browserify&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="architecture avec twig" src="images/javascript/portal-architecture-template.png"&gt;&lt;/p&gt;
&lt;p&gt;Twig étant une technologie issue du monde &lt;code&gt;PHP&lt;/code&gt;, elle n’est pas très adaptée à JavaScript.
Par conséquent, l’un de nos futurs chantiers technique est l’étude d’un successeur (mustache, jade, react ?) suivi de la migration des templates.&lt;/p&gt;
&lt;p&gt;Nous espérons à nouveau un gain de performances lié à cette migration, notamment en abandonnant l’héritage au sein des templates.&lt;/p&gt;</content><category term="français"></category><category term="javascript"></category><category term="node.js"></category></entry><entry><title>Javascript: la construction à la volée (watching) avec Browserify</title><link href="https://techblog.mappy.com/browerify-la-construction-a-la-volee.html" rel="alternate"></link><published>2016-10-06T00:00:00+02:00</published><updated>2016-10-06T00:00:00+02:00</updated><author><name>Vivien Ripoche</name></author><id>tag:techblog.mappy.com,2016-10-06:/browerify-la-construction-a-la-volee.html</id><summary type="html">&lt;p&gt;Article présentant la création du bundle à chaque modification des fichiers sources avec Browserify&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Browserify, c'est quoi déjà ?&lt;/h1&gt;
&lt;p&gt;De manière simple, &lt;a href="http://browserify.org/"&gt;browserify&lt;/a&gt; permet d'avoir accès à l'écosystème de NodeJS (&lt;code&gt;NPM&lt;/code&gt;, &lt;code&gt;CommonJS&lt;/code&gt;) avec des scripts destinés au navigateur (browser).&lt;/p&gt;
&lt;p&gt;Après avoir installé le module browserify via &lt;code&gt;NPM&lt;/code&gt;, il peut s'utiliser directement en ligne de commande :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;browserify main.js -o bundle.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mais est plus souvent utilisé en tant que librairie dans un script NodeJS :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;browserify&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;browserify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bundleWS&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createWriteStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/bundle.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;browserify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;main.js&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bundleWS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On remarque immédiatement que &lt;code&gt;browserify&lt;/code&gt; utilise des flux textes ou &lt;a href="http://www.sandersdenardi.com/readable-writable-transform-streams-node/"&gt;text streams&lt;/a&gt; comme format de sortie via &lt;code&gt;bundle()&lt;/code&gt;.
Cela permet une grande souplesse mais ausi de  pouvoir l'utiliser avec d'autres outils utilisant les streams comme &lt;a href="http://gulpjs.com/"&gt;gulp&lt;/a&gt;.
Attention car ce dernier utilise un format de stream spécifique, basé sur le système de fichier : &lt;a href="https://github.com/gulpjs/vinyl"&gt;vinyl&lt;/a&gt;. Il faudra donc convertir le &lt;code&gt;text stream&lt;/code&gt; en ce format avant d'utiliser des pipes gulp.&lt;/p&gt;
&lt;p&gt;Browserify propose des &lt;code&gt;transforms&lt;/code&gt;, qui sont des tranformateurs de flux, comme la minification (&lt;code&gt;uglify&lt;/code&gt;) ou l'ajout de scripts de librairies tiers comme &lt;code&gt;bower&lt;/code&gt; ou &lt;code&gt;shim&lt;/code&gt;.
On peut aussi lui ajouter des greffons (&lt;code&gt;plugins&lt;/code&gt;) afin d'ajouter à &lt;code&gt;browserify&lt;/code&gt; d'autres capacités comme le &lt;code&gt;watching&lt;/code&gt; avec Watchify.&lt;/p&gt;
&lt;h1&gt;A quoi consiste la construction à la volée (watching) ?&lt;/h1&gt;
&lt;p&gt;Il s'agit littéralement de vérifier l'état d'un ensemble de fichiers et de déclencher un processus à chaque modification.&lt;/p&gt;
&lt;p&gt;Par extension, on appelle également &lt;code&gt;watching&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;la construction d'un nouveau livrable à chaque modification,&lt;/li&gt;
&lt;li&gt;et dans le cas de scripts navigateurs, le rechargement de la page (&lt;code&gt;livereload&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Comment le met-on en place ?&lt;/h1&gt;
&lt;h2&gt;Watchify&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/substack/watchify"&gt;Watchify&lt;/a&gt; est un plugin &lt;code&gt;browserify&lt;/code&gt;. Il peut s'ajouter à la configuration grâce à l'attribut &lt;code&gt;plugin&lt;/code&gt; ou via un &lt;code&gt;wrapper&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;browserify&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;browserify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;watchify&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;watchify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bundleWS&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createWriteStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/bundle.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//config&lt;/span&gt;
&lt;span class="nx"&gt;browserify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;main.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;watchify&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;watchify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bundleWS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ou&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;browserify&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;browserify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;watchify&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;watchify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bundleWS&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createWriteStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/bundle.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//wrapping&lt;/span&gt;
&lt;span class="nx"&gt;watchify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;browserify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;main.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;watchify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))).&lt;/span&gt;&lt;span class="nx"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bundleWS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vous avez sûrement remarqué qu'on ajoute en plus des &lt;code&gt;watchify.args&lt;/code&gt; à browserify, ces arguments sont :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="nx"&gt;packageCache&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En fait, ces options permettent d'activer le cache des sources et des modules &lt;code&gt;NPM&lt;/code&gt; de &lt;code&gt;browserify&lt;/code&gt;. Cela permet à &lt;code&gt;watchify&lt;/code&gt; de reconstruire les livrables de manière incrémentale.&lt;/p&gt;
&lt;p&gt;Il est évident que la création du livrable est nettement plus rapide de cette manière, d'ailleurs &lt;code&gt;watchify&lt;/code&gt; impose ces options et ne fait rien le cas échéant.&lt;/p&gt;
&lt;p&gt;Seulement quelques millisecondes sont nécessaires pour reconstruire les sources grâce à la construction incrémentale :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Watchify" src="images/javascript/watchify.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Livereload&lt;/h2&gt;
&lt;p&gt;Une fois les sources construites, il est pratique de recharger la page immédiatement et automatiquement. C’est là qu’intervient &lt;code&gt;livereload&lt;/code&gt;, qui grâce aux &lt;a href="https://developer.mozilla.org/fr/docs/WebSockets"&gt;WebSockets&lt;/a&gt;, recharge la page à chaque reconstruction.&lt;/p&gt;
&lt;p&gt;Nous allons utiliser &lt;code&gt;gulp-livereload&lt;/code&gt; et voir ainsi comment on combine les différents &lt;code&gt;streams&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;browserify&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;browserify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;watchify&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;watchify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vinyl-source-stream&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;livereload&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gulp-livereload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;browserify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;main.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;watchify&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;watchify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;//Create Vinyl write streams from conventional write text streams&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/bundle.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;livereload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Et oui, &lt;code&gt;gulp-livereload&lt;/code&gt; a juste besoin d'être "pipé" pour être fonctionnel (la puissance des &lt;code&gt;streams&lt;/code&gt; et de gulp...).&lt;/p&gt;
&lt;p&gt;Ensuite, l'appel au script &lt;code&gt;livereload.js&lt;/code&gt; doit être ajouté dans la page HTML :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://localhost:35729/livereload.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Il peut aussi être chargé via un plugin navigateur comme &lt;a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei"&gt;Livereload&lt;/a&gt; (Chrome/Chromium) pour ne pas polluer la page.
Si HTTPS est nécéssaire (comme sur le site Mappy), préférez le plugin &lt;a href="https://chrome.google.com/webstore/detail/remotelivereload/jlppknnillhjgiengoigajegdpieppei"&gt;RemoteLivereload&lt;/a&gt; (Chrome/Chromium) à Livereload.&lt;/p&gt;
&lt;p&gt;Au sujet d'HTTPS, voici conmment on ajoute la clé et le certificat à &lt;code&gt;gulp-livereload&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;livereload&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gulp-livereload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;livereload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/private.key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;cert&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/public.pem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;browserify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="français"></category><category term="javascript"></category><category term="watch"></category><category term="browserify"></category><category term="livereload"></category></entry><entry><title>La Rétrospective de La Table Ronde</title><link href="https://techblog.mappy.com/agility.html" rel="alternate"></link><published>2016-04-08T00:00:00+02:00</published><updated>2016-04-08T00:00:00+02:00</updated><author><name>Xavier Coutin</name></author><id>tag:techblog.mappy.com,2016-04-08:/agility.html</id><summary type="html">&lt;p&gt;Une variante de rétrospective agile&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Enjeux de cette rétrospective&lt;/h2&gt;
&lt;p&gt;Lorsqu'une équipe travaille depuis de très nombreuses itérations, la cérémonie de la rétrospective peut devenir fastidieuse :
format toujours identique, impression de tourner en rond...
Pour que cette réunion ne soit pas ressentie comme une corvée, il est important d'en renouveler régulièrement la forme, et, dans les limites du possible, le fond.&lt;/p&gt;
&lt;p&gt;Cette variante de la Table Ronde a pour but d'essayer d'impliquer les membres de l'équipe au-delà de la réunion. A l'issue de la rétrospective, ils devront avoir formé des binômes de chevaliers en vue de réaliser une quête (et un trinôme si le nombre de participants est impair).
(Et si les participants sont fans de Kaamelott, c'est encore mieux).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chevaliers" src="images/agility/kaamelott.png"&gt;&lt;/p&gt;
&lt;h2&gt;Préparation de la rétrospective&lt;/h2&gt;
&lt;p&gt;Vous aurez besoin de :
&lt;em&gt;   un tableau
&lt;/em&gt;   des post-its et des feutres
&lt;em&gt;   des papiers sur lesquels sont inscrits les noms de personnages de Kaamelott
&lt;/em&gt;   une boîte / un chapeau pour y placer les papiers pliés en quatre
*   un QCM portant sur la série Kaamelott&lt;/p&gt;
&lt;p&gt;&lt;a href="resources/agility/QuizKaamelott.pdf"&gt;Exemple de QCM&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Déroulement de la rétrospective&lt;/h2&gt;
&lt;p&gt;Sur un tableau blanc, préparer trois colonnes dans lesquelles les participants viendront placer leurs post-its :
+   &lt;em&gt;On en a gros !&lt;/em&gt; : Qu'est-ce qui ne va pas ?
+   &lt;em&gt;Le Graal&lt;/em&gt; : le but à atteindre (au niveau de l'équipe, ou au niveau personnel)
+   &lt;em&gt;Excalibur&lt;/em&gt; : ce qui peut aider l'équipe à atteindre le Graal'&lt;/p&gt;
&lt;p&gt;Distribuer le QCM aux participants, qui ont toute la durée de la rétrospective pour le remplir. Eventuellement, proposer une récompense pour celui qui a le plus de bonnes réponses, mais le but est principalement d'instaurer une aura de bonne humeur généralisée. Comme ce sont des questions à choix multiples, même les personnes ne connaissant pas la série peuvent répondre correctement.&lt;/p&gt;
&lt;p&gt;Ensuite, la réunion se déroule de manière classique : une fois tous les post-its placés au tableau, on vote pour les sujets dont on veut débattre durant le temps qu'il reste. Avant de lancer les discussions, chacun pioche un personnage de Kammelott et on forme des binômes de chevaliers (par exemple : Perceval et Karadoc, Yvain et Gauvain, Guethenoc et Roparz'h, Merlin et Elias...).
Chaque binôme devra trouver une quête à réaliser pour la quête du Graal, avant la prochaine rétrospective, que ce soit pour aider l’équipe à atteindre un des Graals déterminés pendant la réunion, ou pour faciliter le travail de l’équipe, améliorer l’ambiance...&lt;/p&gt;</content><category term="français"></category><category term="agilité"></category><category term="rétrospective"></category></entry><entry><title>Une solution simple pour les A/B test</title><link href="https://techblog.mappy.com/solution-simple-ab-tests.html" rel="alternate"></link><published>2016-01-19T00:00:00+01:00</published><updated>2016-01-19T00:00:00+01:00</updated><author><name>Grégory Paul</name></author><id>tag:techblog.mappy.com,2016-01-19:/solution-simple-ab-tests.html</id><summary type="html">&lt;p&gt;Une solution simple d’A/B test pour les applications web.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Les A/B tests sont aujourd’hui une pratique courante sur les applications web et mobile.&lt;/p&gt;
&lt;p&gt;Le principe est de proposer une variante pour une fonctionnalité pour une partie de l’audience et ce, pendant une période donnée.&lt;/p&gt;
&lt;p&gt;Exemples :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;changement de couleur d’un bouton,&lt;/li&gt;
&lt;li&gt;présentation de produits sous forme de grille plutôt que sous forme de liste.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L’intérêt est ensuite de suivre les métriques (clics, taux de conversion, achats, etc) pour le groupe A (sans variante) et le groupe B (avec la variante).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Exemple A/B test" src="images/web/AB-testing.png"&gt;
Source de l’image : &lt;a href="https://fr.wikipedia.org/wiki/Test_A/B"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A l’issue de la période, si les métriques pour la variante sont meilleures que la version normale, on transforme la variante en version par défaut.&lt;/p&gt;
&lt;p&gt;Il est tout à fait possible d’avoir plus qu’une variante que l’on partagera entre l’audience totale (33 % pour 2 variantes et la référence, 25 % pour 3, etc).&lt;/p&gt;
&lt;p&gt;Le but des A/B tests est de pouvoir tester ce qui fonctionne le mieux en condition réelle pour améliorer continuellement son produit.&lt;/p&gt;
&lt;h2&gt;Premier essai sur mappy.com&lt;/h2&gt;
&lt;p&gt;L’objectif de &lt;a href="http://fr.mappy.com"&gt;Mappy&lt;/a&gt; est de tester différentes variantes du site web, que cela soit purement graphique ou à travers des écrans/comportements différents.&lt;/p&gt;
&lt;p&gt;Nous avons initialement utilisé un outil externe fonctionnant via l’inclusion d’un JavaScript externe depuis le &lt;a href="http://fr.mappy.com"&gt;site Mappy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;L’avantage d’une telle solution est qu’elle est facilement mise en place sur le site (une simple balise &lt;code&gt;script&lt;/code&gt;) et que la création des tests peut se faire via l’outil externe en ligne (via du "drag and drop" ou via l’écriture de JavaScript directement dans l’outil).&lt;/p&gt;
&lt;p&gt;Le principal inconvénient d’une telle solution est qu’il est difficile de réaliser tous les A/B tests souhaités.&lt;/p&gt;
&lt;p&gt;En effet, il est difficile de se brancher sur des appels Ajax ou d’autres comportements et on en revient à "surveiller" des changements sur des éléments DOM.
Cela n’est pas performant et on constate rapidement du "&lt;a href="https://en.wikipedia.org/wiki/Flicker_%28screen%29#Software_artifacts"&gt;flickering&lt;/a&gt;" (version initiale suivi de la variante après quelques millisecondes).&lt;/p&gt;
&lt;p&gt;Par ailleurs, l’inclusion d’un script externe est toujours délicate, notamment en terme de performances (requêtes, poids, etc) et de sécurité (non maîtrise du script inclus).&lt;/p&gt;
&lt;h2&gt;Une meilleure solution&lt;/h2&gt;
&lt;p&gt;Après avoir validé une preuve de concept, nous avons rapidement réalisé qu’il était trivial de gérer les tests A/B soi-même.&lt;/p&gt;
&lt;p&gt;Il s’agit simplement :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;d’héberger un fichier de configuration indiquant les tests, la répartition, etc,&lt;/li&gt;
&lt;li&gt;d’analyser ce fichier au chargement du site, de tirer un chiffre au hasard pour déterminer le test à appliquer,&lt;/li&gt;
&lt;li&gt;ensuite, pour chaque test, de faire les modifications dans le code pour afficher la variante (ou ne rien faire et afficher la référence).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;La partie métrique est également très importante mais nous utilisons simplement notre solution existante (AT Internet ou, pour notre service BI, ajoutons les identifiants d’A/B test et de variante aux requêtes d’API).&lt;/p&gt;
&lt;p&gt;Comme exemple, j’utiliserai notre 1er A/B test ayant consisté à proposer 4 couleurs de boutons différentes :&lt;/p&gt;
&lt;p&gt;&lt;img alt="A/B test sur les couleurs de bouton" src="images/web/abtest-buttons.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;1. Fichier de configuration&lt;/h3&gt;
&lt;p&gt;Mappy héberge le fichier de configuration des A/B tests sur &lt;a href="http://ab.mappy.net/config.json"&gt;http://ab.mappy.net/config.json&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Voici le fichier de configuration pour le test sur les couleurs de boutons :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="s2"&gt;&amp;quot;AB01-couleur-resa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;// Identifiant unique du test&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;2015-12-18T00:00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Date ou commence le test&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="s2"&gt;&amp;quot;2016-01-01T00:00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Date ou se termine le test&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;conditions&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;platforms&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;// &amp;quot;ge&amp;quot; pour les grands ecrans, &amp;quot;pe&amp;quot; pour les mobiles&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;locales&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fr_FR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// sur quel site s applique le test : fr.mappy.com, fr-be,...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;variants&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;reference&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// version de référence,&lt;/span&gt;
        &lt;span class="c1"&gt;// utilisé lorsque le chiffre du navigateur est entre 0 et 25 (exclus)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;orangefonce&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// 1ère variante, entre 25 et 50&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rose&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s2"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// etc&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lavande&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="s2"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. AbTestModel et AbTestCollection&lt;/h3&gt;
&lt;p&gt;Nous utilisons un modèle Backbone comme objet pour gérer chaque A/B test.
Il s’agit de l’&lt;code&gt;AbTestModel&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ce dernier charge la configuration et la valide (vérification de la présence des champs, que les totaux des variantes fassent 100 %, etc).&lt;/p&gt;
&lt;p&gt;Il offre également une méthode &lt;code&gt;isTargetted&lt;/code&gt; qui retourne &lt;code&gt;true&lt;/code&gt; si le test est éligible pour le navigateur courant (s’il répond aux critères).
Cette méthode se décompose en 3 parties : &lt;code&gt;isTargettedByPlatform&lt;/code&gt;, &lt;code&gt;isTargettedByLocale&lt;/code&gt; et &lt;code&gt;isTargettedByDate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Une autre méthode, &lt;code&gt;getVariant&lt;/code&gt;, retourne l’une des variantes en ayant préalablement tiré un chiffre au hasard via &lt;code&gt;getRandomId&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Enfin, la méthode &lt;code&gt;start&lt;/code&gt; est appelée lorsque l’on souhaite démarrer le test.
Cette dernière change un état interne et se doit de lancer un appel de tag.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;underscore&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;backbone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;AbTestModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;

    &lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Conversion des dates&lt;/span&gt;
        &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Vérification des champs obligatoires&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mandatory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;to&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;variants&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;conditions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mandatory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;missing attribute in abtest configuration&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Vérification que le total des variantes fasse 100 %&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;lastLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;lastLimit&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;lastLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invalid abtest variants&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Vérification des conditions&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;conditions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;platforms&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;conditions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;platforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
            &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;conditions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locales&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;conditions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invalid abtest conditions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;// Le navigateur courant correspond-il à la cible ?&lt;/span&gt;
    &lt;span class="nx"&gt;isTargetted&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTargettedByDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTargettedByPlatform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTargettedByLocale&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;// Est-ce la bonne date ?&lt;/span&gt;
    &lt;span class="nx"&gt;isTargettedByDate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;to&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;// Est-ce la bonne taille d’écran (mobile ou navigateur de bureau) ?&lt;/span&gt;
    &lt;span class="nx"&gt;isTargettedByPlatform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;conditions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;platforms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;medium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;conditions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;platforms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;medium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;// Est-ce le bon domaine ?&lt;/span&gt;
    &lt;span class="nx"&gt;isTargettedByLocale&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;conditions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;locales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;// Tirage au sort d’une valeur qui permettra de déterminer la variante&lt;/span&gt;
    &lt;span class="nx"&gt;getRandomId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ab&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ab&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;ab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;randomId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ab&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Variante persistée dans le localStorage, afin de servir la même variante de visite en visite&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;randomId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;// Quelle est la variante pour ce navigateur ?&lt;/span&gt;
    &lt;span class="nx"&gt;getVariant&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;variants&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRandomId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRandomId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;// Démarrage du test&lt;/span&gt;
    &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;started&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Envoi d’un tag à AT Internet pour signaler le début du test&lt;/span&gt;
            &lt;span class="c1"&gt;// http://help.atinternet-solutions.com/FR/implementation/specific_tags/tg_abtesting_fr.htm&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;started&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Le fichier de configuration est un tableau d’objet JSON.&lt;/p&gt;
&lt;p&gt;Nous utilisons donc une collection Backbone, &lt;code&gt;AbTestCollection&lt;/code&gt;, qui se charge de récupérer ce fichier via Ajax lors d’un appel sur la méthode &lt;code&gt;fetch&lt;/code&gt; et d’instancier les modèles &lt;code&gt;AbTestModel&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;underscore&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;backbone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;AbTestModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../model/AbTestModel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;AbTestCollection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;

    &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AbTestModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Model composant la collection&lt;/span&gt;

    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;//abtest.mappy.net/config.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;// Les collections Backbone héritent d’une méthode fetch, effectuant un appel Ajax sur la propriété url&lt;/span&gt;

    &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="c1"&gt;// Test en cours (il n’y en a toujours qu’un seul actif en même temps)&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;currentTest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTargetted&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentTest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentTest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="nx"&gt;getVariant&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;testId&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;testId&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVariant&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Appel de start sur le test pour le test en cours&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;testId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. Utilisation dans le code&lt;/h3&gt;
&lt;p&gt;Pour ce test qui consiste à proposer différentes couleurs de boutons, il suffit alors :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;D’instancier la collection pour déterminer le test actif,&lt;/li&gt;
&lt;li&gt;De récupérer la variante de test,&lt;/li&gt;
&lt;li&gt;D’ajouter une classe CSS sur le &lt;code&gt;body&lt;/code&gt; qui surchargera les couleurs des boutons, ici dans un fichier &lt;code&gt;less&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;De démarrer le test (consistant à envoyer un tag) dès qu’une variante (ou la référence) est affichée à l’utilisateur&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;variantBookingColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Mappy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abTestCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVariant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AB01-couleur-resa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variantBookingColor&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;variantBookingColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ab-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;variantBookingColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ab-orangefonce&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#f86312&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ab-rose&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ea148c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ab-lavande&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#8968d4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Et voici le démarrage du test dès l’affichage d’une liste possédant les boutons.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;Mappy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abTestCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AB01-couleur-resa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En effet, concernant les statistiques, nous ne nous intéressons qu’aux personnes ayant vu la référence ou une variante et non tous les autres visiteurs.&lt;/p&gt;
&lt;p&gt;L’exemple ici est simpliste mais, en laissant la liberté côté JavaScript, il est possible de réaliser n’importe quel test.&lt;/p&gt;
&lt;p&gt;Par exemple, notre second A/B test propose 2 menus de catégorie différents (donc des modifications CSS mais également d’autres balises HTML et éventuellement une vue Backbone différente).
Il est même possible, en ajoutant la variante aux paramètres des ressources JSON, de servir des contenus différents et donc d’étendre le test au code serveur.&lt;/p&gt;
&lt;h2&gt;Un nom, un logo : Loligo&lt;/h2&gt;
&lt;p&gt;Pour la petite histoire, ce mini-projet a été baptisé Loligo en honneur à l’espèce de Calamar &lt;a href="https://en.wikipedia.org/wiki/Loligo_forbesii"&gt;Loligo Forbesii&lt;/a&gt; et sa capacité de &lt;a href="https://www.youtube.com/watch?v=pRrKzk1QmT4"&gt;camouflage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Un logo a été réalisé pour l’occasion :&lt;/p&gt;
&lt;p&gt;&lt;img alt="logo de loligo" src="images/web/loligo.png"&gt;&lt;/p&gt;
&lt;h2&gt;Pour conclure&lt;/h2&gt;
&lt;p&gt;La solution apportée répond pleinement à nos besoins et supprime les problématiques inhérentes à l’utilisation d’un service externe.
Nous gagnons en flexibilité, en performances, en sécurité (plus d’inclusion de JS externe) et les A/B tests s’intègrent à notre workflow et nos outils (validation du code via jshint|eslint, tests unitaires, tests fonctionnels, etc).&lt;/p&gt;</content><category term="français"></category><category term="javascript"></category><category term="abtest"></category></entry><entry><title>Vues 360 en WebGL</title><link href="https://techblog.mappy.com/vues-360-en-webgl.html" rel="alternate"></link><published>2015-11-05T00:00:00+01:00</published><updated>2015-11-05T00:00:00+01:00</updated><author><name>Grégory Paul</name></author><id>tag:techblog.mappy.com,2015-11-05:/vues-360-en-webgl.html</id><summary type="html">&lt;p&gt;Cet article présente la migration des vues 360 depuis Flash vers WebGL&lt;/p&gt;</summary><content type="html">&lt;p&gt;Le site &lt;a href="http://fr.mappy.com"&gt;Mappy&lt;/a&gt; offre depuis 2011 des &lt;a href="http://fr.mappy.com/#/436/M1/TSearch/Sparis/N1090.14493,12.34393,2.34821,48.85369/Z7/"&gt;vues 360°&lt;/a&gt; des &lt;a href="http://widgets.mappy.com/360view/documentation/#coverage"&gt;320 villes&lt;/a&gt; plus grandes villes de France :&lt;/p&gt;
&lt;iframe src="http://widgets.mappy.com/360view?key=techblog&amp;lat=48.85369&amp;lng=2.34821" width="100%" height="400" scrolling="no"&gt;&lt;/iframe&gt;

&lt;h2&gt;MappyCar&lt;/h2&gt;
&lt;p&gt;En effet, 2 voitures surnommées "MappyCar" (&lt;a href="https://twitter.com/earthmine02"&gt;@earthmine02&lt;/a&gt;, &lt;a href="https://twitter.com/earthmine07"&gt;@earthmine07&lt;/a&gt;) parcourent les rues des villes de France pour prendre des photos sous plusieurs angles.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mappy Car" src="images/webgl/mappy-car.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Historiquement...&lt;/h2&gt;
&lt;p&gt;Historiquement, le composant chargé d’afficher les vues sur le site &lt;a href="http://fr.mappy.com"&gt;fr.mappy.com&lt;/a&gt; fût développé en Flash.&lt;/p&gt;
&lt;p&gt;Il était grand temps de mettre ce composant à jour en adoptant des technologies modernes pour afficher de la 3d au sein du navigateur, j’ai nommé &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API"&gt;WebGL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mais avant de nous plonger dans WebGL, une présentation des vues 360 s’impose.&lt;/p&gt;
&lt;h2&gt;Explications des prises de vue 360&lt;/h2&gt;
&lt;p&gt;Les véhicules Mappy sont équipés de 8 appareils photos orientés de chaque côté de la voiture et prennent des photos régulièrement de façon synchronisée pendant le déplacement.
Ils enregistrent également différents paramètres tels que les coordonnées GPS, l’altitude, le tangage (pitch), l’orientation (yaw) et le roulis (roll).&lt;/p&gt;
&lt;p&gt;Les photos sont ensuites assemblées afin d'obtenir 6 images.
Ces 6 images seront projetées à l’intérieur d’un cube. Ce cube est alors appelé "skybox".&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bitmap tile faces layout on a cube" src="images/panoramic_cube_01.png"&gt;&lt;/p&gt;
&lt;h2&gt;Scène 3d&lt;/h2&gt;
&lt;p&gt;L’astuce est alors de créer une scène 3d composée de ce cube et d’une caméra au centre.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cube faces layout" src="images/panoramic_cube_02.png"&gt;&lt;/p&gt;
&lt;p&gt;La caméra peut bouger à l’intérieur du cube sur 2 axes afin de pivoter horizontalement et verticalement, donnant l’effet de regarder autour de soi.&lt;/p&gt;
&lt;h2&gt;Déplacement&lt;/h2&gt;
&lt;p&gt;Il y a plusieurs façons de se déplacer d'une vue à l'autre :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En utilisant les flèches, on peut se déplacer vers la vue la plus proche dans la direction souhaitée.&lt;/li&gt;
&lt;li&gt;En cliquant sur le sol, on va chercher s'il existe une vue proche à ce point et l'afficher.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Le déplacement d'une vue à l'autre consiste simplement à charger les images formant la nouvelle "skybox" (le cube dans lequel se trouve la caméra) et à effacer les précédentes.&lt;/p&gt;
&lt;p&gt;Il est également possible de zoomer dans la vue. Pour cela, nous avons joué sur l'angle de vision (on l’appelle &lt;a href="https://en.wikipedia.org/wiki/Field_of_view"&gt;field of view&lt;/a&gt; en anglais).&lt;/p&gt;
&lt;h2&gt;Chargement progressif&lt;/h2&gt;
&lt;p&gt;Afin d'avoir un rendu le plus rapide possible et pour éviter à l'utilisateur de bloquer sur un fond noir lorsque sa connexion est lente, la vue charge d'abord un cube avec des images de basse qualité, donc très légères.
Lorsque cette première "skybox" est affichée, la vue va charger des images de meilleure qualité. En fonction de la taille d’écran ou de la résolution, chaque face du cube sera composée d'une ou de plusieurs images (1, 4 ou 16 images par face) afin d’avoir un rendu net sur tous les supports.&lt;/p&gt;
&lt;p&gt;&lt;img alt="différentes résolutions" src="images/panoramic_cube_03.png"&gt;&lt;/p&gt;
&lt;h2&gt;Three.js&lt;/h2&gt;
&lt;p&gt;Plutôt que de réinventer la roue, nous nous sommes rapidement orientés vers &lt;a href="http://threejs.org/"&gt;three.js&lt;/a&gt;, une excellente librairie 3d.
Three.js permet, en quelques lignes de code, d’afficher une vue 3d sans avoir à manipuler l’API WebGL de plus bas niveau.&lt;/p&gt;
&lt;p&gt;Voici un exemple de "skybox" basique où la caméra tourne sur elle-même :&lt;/p&gt;
&lt;iframe width="100%" height="700" src="//jsfiddle.net/053ng6gm/2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;

&lt;h2&gt;Interaction avec les objets&lt;/h2&gt;
&lt;p&gt;Savoir sur quel élément a cliqué l’utilisateur dans un moteur 3d est plus compliqué que simplement ajouter un "listener" sur un élément HTML.
En effet, lors d’un clic dans la scène 3d, nous récupèrons simplement un point (x,y) et il convient alors de trouver quel objet il croise (c’est le principe du &lt;a href="https://fr.wikipedia.org/wiki/Raycasting"&gt;raycasting&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Pour cela, nous allons d’abord trouver le vecteur 3d entre ce point et la position de la caméra.
Ensuite, Three.js nous propose le &lt;a href="https://github.com/mrdoob/three.js/blob/master/src/core/Raycaster.js"&gt;Raycaster&lt;/a&gt; qui permet ensuite de détecter une intersection avec un objet 3d.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var vector = getVectorFromEvent(event);
var raycaster = new THREE.Raycaster(this.camera.position, vector);
var intersectedObjects = raycaster.intersectObjects(objectsIn3dScene);
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Support navigateurs&lt;/h2&gt;
&lt;p&gt;WebGL est supporté dans tous les &lt;a href="http://caniuse.com/#search=webgl"&gt;navigateurs modernes&lt;/a&gt;, y compris IE11.
Cependant, nous nous sommes rapidement rendus compte que certaines tablettes ou téléphones Android, bien que récents, ne supportent pas WebGL.
Par ailleurs, WebGL peut être désactivé en fonction des &lt;a href="https://www.khronos.org/webgl/wiki/BlacklistsAndWhitelists"&gt;pilotes installés (ou non) sur la machine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Par conséquent, nous avons également utilisé un système de rendu alternatif proposé par Three.js, le &lt;a href="https://github.com/mrdoob/three.js/blob/master/examples/js/renderers/CSS3DRenderer.js"&gt;CSS3DRenderer.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ce dernier utilise les &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform"&gt;transformations CSS 3d&lt;/a&gt; qui sont elles &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform"&gt;supportées de façon un peu plus large&lt;/a&gt;.
CSS3DRenderer est en pratique moins performant que WebGL mais permet d’offrir un support minimal sur ces périphèriques ainsi que sur IE 10.&lt;/p&gt;
&lt;h2&gt;Réalité augmentée et cardBoard&lt;/h2&gt;
&lt;p&gt;Les téléphones et tablettes modernes possèdent des capteurs d’orientations.
Ils sont accessibles en JavaScript via &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Detecting_device_orientation"&gt;API DeviceOrientations&lt;/a&gt;.
Nous n’avons pas pu résister à l'envie de &lt;a href="http://cdn.rawgit.com/Mappy/mappy.github.io-source/7545ef6cc29d998935e3cc8b5697bf533b4d7349/content/resources/webgl/deviceorientation.html"&gt;connecter cette API à la vue pour la piloter avec son téléphone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enfin, si vous disposez d’un &lt;a href="https://www.google.com/get/cardboard/"&gt;cardboard&lt;/a&gt; (boîte en carton où l’on peut insérer son téléphone), vous pouvez chausser vos lunettes et &lt;a href="http://cdn.rawgit.com/Mappy/mappy.github.io-source/7545ef6cc29d998935e3cc8b5697bf533b4d7349/content/resources/webgl/cardboard.html"&gt;visualiser les vues 360 en réalité augmentée&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="virtual reality" src="images/webgl/virtual-reality.png"&gt;&lt;/p&gt;
&lt;p&gt;Three.js implémente cette fonctionnalité via &lt;a href="https://github.com/mrdoob/three.js/blob/master/examples/js/effects/StereoEffect.js"&gt;StereoEffect&lt;/a&gt; et &lt;a href="https://github.com/mrdoob/three.js/blob/master/examples/js/controls/DeviceOrientationControls.js"&gt;DeviceOrientationControls&lt;/a&gt;. Je vous invite à lire ce &lt;a href="http://www.sitepoint.com/bringing-vr-to-web-google-cardboard-three-js/"&gt;très bon article&lt;/a&gt; si le sujet vous intéresse.&lt;/p&gt;
&lt;h2&gt;Un dernier mot sur l’intégration des vues sur votre site&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://fr.mappy.com"&gt;Mappy&lt;/a&gt; propose plusieurs &lt;a href="http://corporate.mappy.com/faq/integrez-mappy/"&gt;modes d’intégration&lt;/a&gt; pour ses cartes ou sa vue 360.
L’un des modes se présente sous la forme d’un widget (tel que l’exemple en haut de cette page).
N’hésitez pas à nous contacter (contact[AT]mappy.com) si une intégration sur votre site ou vos applications mobiles vous intéresse.&lt;/p&gt;</content><category term="français"></category><category term="javascript"></category><category term="webgl"></category></entry><entry><title>Mappy.com dorénavant responsive !</title><link href="https://techblog.mappy.com/mappy-responsive.html" rel="alternate"></link><published>2015-07-09T00:00:00+02:00</published><updated>2015-07-09T00:00:00+02:00</updated><author><name>Grégory Paul</name></author><id>tag:techblog.mappy.com,2015-07-09:/mappy-responsive.html</id><summary type="html">&lt;p&gt;Explications du remplacement du site Mappy et du site mobile par un unique site responsive.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Depuis le mercredi 20 mai, mappy.com propose un site unique et responsive pour tous les navigateurs (bureau, tablette ou mobile).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Site petit écran" src="images/responsive/petitecran.png"&gt;
&lt;img alt="Site écran moyen" src="images/responsive/moyenecran.png"&gt;
&lt;img alt="Site grand écran" src="images/responsive/grandecran.png"&gt;&lt;/p&gt;
&lt;p&gt;En effet, auparavant, les sites &lt;a href="//fr.mappy.com"&gt;fr.mappy.com&lt;/a&gt;, &lt;a href="//fr-be.mappy.com"&gt;fr-be.mappy.com&lt;/a&gt;, &lt;a href="//nl-be.mappy.com"&gt;nl-be.mappy.com&lt;/a&gt; et &lt;a href="//en.mappy.com"&gt;en.mappy.com&lt;/a&gt; étaient dédiés aux navigateurs de bureau et m.mappy.com aux navigateurs mobiles et tablettes.
Ce billet a pour but de présenter le contexte et notre parcours vers cette orientation.&lt;/p&gt;
&lt;h2&gt;Historiquement 2 sites&lt;/h2&gt;
&lt;p&gt;Mappy a mis en ligne mobile il y a plus de 5 ans.
D’abord via des technologies de type BkRender (pour les téléphones très limités de l’époque), le site a évolué à plusieurs reprises vers une version "HTML5" incorporant une base commune de code avec le site principal (notamment backbone et l’API de cartographie Mappy).&lt;/p&gt;
&lt;h2&gt;Réflexion autour du Responsive&lt;/h2&gt;
&lt;p&gt;Nos principales motivations au passage à un site responsive étaient :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;d’arrêter le double développement d’User-Stories à la fois sur le site fixe et mobile (et, ainsi, de livrer les futures User-Stories sur tous les supports),&lt;/li&gt;
&lt;li&gt;l’&lt;a href="http://googlewebmastercentral.blogspot.fr/2015/04/faqs-april-21st-mobile-friendly.html"&gt;annonce de Google&lt;/a&gt; favorisant les sites "mobile-friendly" alors que le site mobile était fermé aux robots,&lt;/li&gt;
&lt;li&gt;le fait de n’avoir qu’une unique base de code, afin de simplifier le développement de nouvelles fonctionnalités et la maintenance,&lt;/li&gt;
&lt;li&gt;d’offrir une version mobile pour les versions étrangères.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Le passage à un site responsive soulève néanmoins quelques points de vigilance quant au processus actuel :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chaque fonctionnalité doit être testée sur plus de support qu’auparavant,&lt;/li&gt;
&lt;li&gt;lors de la conception, certains points doivent être pris en compte (conception sur petit et grand écran, gestion du touch, image en haute définition, etc).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enfin, certaines fonctionnalités sont différentes entre le site fixe et le site mobile.
L’itinéraire sur mobile par exemple, présente un écran affichant le sommaire de la feuille de route, écran inexistant sur la version fixe.&lt;/p&gt;
&lt;p&gt;Une preuve de concept a alors été réalisée pour déterminer la faisabilité technique d’un site reponsive.
Cette preuve de concept a démontré qu’un résultat satisfaisant pouvait être atteint à un coût acceptable (environ 2 itérations de développement).&lt;/p&gt;
&lt;h2&gt;Implémentation&lt;/h2&gt;
&lt;h3&gt;"Responsive client" ou "dynamic server" ?&lt;/h3&gt;
&lt;p&gt;L’implémentation peut s’effectuer de 2 façons, éventuellement complémentaires :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;l’&lt;strong&gt;approche "responsive client"&lt;/strong&gt; : le même code est envoyé par le serveur à tous les navigateurs, qu’ils soient mobiles ou non, et l’affichage des éléments graphiques est conditionné par des &lt;code&gt;media queries&lt;/code&gt; CSS et des comportements différents éventuellement conditionnés par du code JavaScript ;&lt;/li&gt;
&lt;li&gt;l’&lt;strong&gt;approche "dynamic server"&lt;/strong&gt; : un contenu HTML, CSS et JS différent est envoyé à chaque client en fonction du &lt;code&gt;User-Agent&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L’approche "dynamic server" a l’avantage de pouvoir servir un contenu allégé de façon bien plus simple qu’avec l’approche côté cliente (notamment pour les images). Cependant, elle a l’énorme inconvénient de servir un contenu différent en fonction du &lt;code&gt;User-Agent&lt;/code&gt;, une pratique dangereuse en cas de &lt;code&gt;reverse-proxy&lt;/code&gt; (à moins d’ajouter un entête &lt;code&gt;Vary: User-Agent&lt;/code&gt; qui rend l’utilisation d’un reverse-proxy caduque). Enfin, certains navigateurs se disent iPhone, Android et Windows Phone comme c’est le cas pour &lt;a href="https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx#code-snippet-11"&gt;Windows Phone 8.1&lt;/a&gt; ce qui rend la tâche complexe.&lt;/p&gt;
&lt;p&gt;L’approche "responsive client", préconisée par les &lt;a href="https://developers.google.com/webmasters/mobile-sites/mobile-seo/configurations/responsive-design#why-responsive-design"&gt;recommandations SEO&lt;/a&gt; de Google, n’a pas ces inconvénients puisque le même contenu est servi à tous.
Par contre, il est plus difficile de charger un contenu allégé en fonction du navigateur.&lt;/p&gt;
&lt;h3&gt;CSS&lt;/h3&gt;
&lt;p&gt;L’implémentation du site responsive s’effectue principalement via des "&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries?redirectlocale=en-US&amp;amp;redirectslug=CSS%2FMedia_queries"&gt;CSS media queries&lt;/a&gt;" afin d’afficher ou masquer des éléments ou les ré-arranger en fonction de la taille d’écran :&lt;/p&gt;
&lt;h4&gt;Site grand écran&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Zoning grand écran" src="images/responsive/zoning-fixe.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Site petit écran&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Zoning petit écran" src="images/responsive/zoning-mobile-home.jpg"&gt;
&lt;img alt="Zoning petit écran" src="images/responsive/zoning-mobile-poi.jpg"&gt;
&lt;img alt="Zoning petit écran" src="images/responsive/zoning-mobile-resultats.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Page d’accueil / écran de résultats / affichage d’un POI ou un itinéraire&lt;/p&gt;
&lt;p&gt;3 points de rupture principaux ont été définis pour :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;les petits écrans (par exemple les téléphones en portrait/paysage et tablette en portrait),&lt;/li&gt;
&lt;li&gt;les écrans moyens (par exemple les tablettes en mode paysage),&lt;/li&gt;
&lt;li&gt;et enfin les grands écrans (toutes les plus grandes définitions) où certains contenus sont plus aérés (taille des éléments, marge entre la barre gauche et la carte et le bord de l’écran, etc).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un point de détail, depuis le passage au responsive, notre vocabulaire a changé puisque nous parlons de petit ou grand écran plutôt que de fixe et mobile.&lt;/p&gt;
&lt;h3&gt;Optimisations graphiques&lt;/h3&gt;
&lt;p&gt;À la manière de &lt;a href="https://fortawesome.github.io/Font-Awesome/icons/"&gt;Font Awesome&lt;/a&gt;, une grande partie de nos icônes (catégories de commerce, outils de la carte, etc) utilise une police de caractère spéciale les aggrégeant. Cela permet de s’abstraire d’une version normale et haute densité de pixel ("retina").
Cette technique se limite toutefois à des icônes d’une seule couleur donc nous conservons encore quelques sprites.&lt;/p&gt;
&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;p&gt;Certains cas minoritaires nécessitent l’utilisation de JavaScript pour adapter le comportement à la cible (notamment le choix des emplacements publicitaires à afficher ou les différences de comportement comme le cas du sommaire de la feuille de route évoqué plus haut).&lt;/p&gt;
&lt;p&gt;Néanmoins, la majorité des cas ne concerne que des adaptations au niveau des CSS.&lt;/p&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;p&gt;Afin d’avoir un feedback rapide lors de nos développements mais également pour faciliter les tests manuels, nous avons opté pour quelques supports physiques de téléphones ou tablettes de type &lt;a href="http://devicelab.vanamco.com/"&gt;devicelab&lt;/a&gt; couplé à &lt;a href="http://vanamco.com/ghostlab/"&gt;GhostLab&lt;/a&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mur de &amp;quot;devices&amp;quot;" src="images/responsive/mur-devices.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Enfin, nos tests Selenium sont en cours d’évolution puisque nous comptons maintenent les lancer sous 2 formats (grand et petit écran).&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Le passage au site "responsive" s’est passé sans accroc.&lt;/p&gt;
&lt;p&gt;Le travail a porté ses fruits, notamment sur 2 points :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;l’impact SEO suite à la mise en ligne du site reponsive a été largement positif avec une progression entre 20 et 30 % (également lié à la suppression du message d’avertissement dans les pages de résultats Google indiquant que le site n’était pas adapté au mobile suite au blocage des robots sur ce même domaine),&lt;/li&gt;
&lt;li&gt;l’unification du code simplifie le développement et allège les processus au quotidien (moins de livrables, moins d’environnements, moins de projets dont des briques communes, etc).&lt;/li&gt;
&lt;/ul&gt;</content><category term="français"></category><category term="javascript"></category><category term="responsive"></category></entry><entry><title>Meet Up Enterprise Search Paris</title><link href="https://techblog.mappy.com/Meet%20Up%20Enterprise%20Search%20Paris.html" rel="alternate"></link><published>2015-04-08T00:00:00+02:00</published><updated>2015-04-08T00:00:00+02:00</updated><author><name>Jérôme Bernardes</name></author><id>tag:techblog.mappy.com,2015-04-08:/Meet Up Enterprise Search Paris.html</id><summary type="html">&lt;p&gt;Découvrez la présentation effectué par Mappy lors du dernier Meet Up Enterprise Search Paris&lt;/p&gt;</summary><content type="html">&lt;p&gt;Voici la présentation effectuée par Mappy lors du dernier &lt;a href="http://www.meetup.com/Enterprise-Search-Paris/events/220773793/"&gt;Meet Up Enterprise Search Paris&lt;/a&gt; impeccablement organisé par &lt;a href="http://www.francelabs.com/"&gt;France Labs&lt;/a&gt; au NUMA.&lt;/p&gt;
&lt;iframe src="//slides.com/solrmappy/deck/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;</content><category term="français"></category><category term="solr"></category><category term="opensource"></category><category term="meetup"></category></entry><entry><title>JavaScript : de Q aux promesses natives</title><link href="https://techblog.mappy.com/javascript-de-Q-aux-promesses-natives.html" rel="alternate"></link><published>2015-04-08T00:00:00+02:00</published><updated>2015-04-08T00:00:00+02:00</updated><author><name>Grégory Paul</name></author><id>tag:techblog.mappy.com,2015-04-08:/javascript-de-Q-aux-promesses-natives.html</id><summary type="html">&lt;p&gt;Cet article présente pourquoi le site Mappy a d’abord utilisé la librairie &lt;a href="https://github.com/kriskowal/q"&gt;Q&lt;/a&gt; avant de migrer vers des promesses natives.&lt;/p&gt;</summary><content type="html">&lt;p&gt;JavaScript est un langage qui utilise un système de concurrence basé sur la boucle d’événement (&lt;a href="https://en.wikipedia.org/wiki/Event_loop"&gt;event loop&lt;/a&gt;).&lt;/p&gt;
&lt;h1&gt;Boucle d’événement ?&lt;/h1&gt;
&lt;p&gt;Le principe est d’avoir une boucle s’exécutant indéfiniment et où il est possible d’enregistrer des fonctions pour certains événements (&lt;code&gt;timeout&lt;/code&gt;, &lt;code&gt;click&lt;/code&gt;, retour d’une réponse ajax, accès à un fichier, etc). Lorsque l’événement se produit, la fonction est exécutée au prochain tour de boucle.
L’avantage principal est le fait que les entrées/sorties sont non bloquantes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Event loop" src="images/javascript/event-loop.png"&gt;&lt;/p&gt;
&lt;p&gt;Si vous souhaitez en savoir plus sur la boucle d’événement, je vous recommande vivement cette présentation de &lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ"&gt;Philip Roberts « What the heck is the event loop anyway? »&lt;/a&gt; présentée lors de la JSConf EU 2014 ou alors cette page sur la &lt;a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/EventLoop"&gt;gestion de la concurrence et boucle des événements&lt;/a&gt; sur &lt;a href="https://developer.mozilla.org/fr/"&gt;MDN&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Code asynchrone&lt;/h1&gt;
&lt;p&gt;Via ce mode de conception avec la boucle d’évémenent, les appels de fonctions asynchrones sont monnaie courante en JavaScript.
Que cela soit côté client (setTimeout, XMLHttpRequest, Geolocation.getCurrentPosition(),...) ou serveur (par exemple avec les &lt;a href="https://nodejs.org/api/fs.html"&gt;API FileSystem de node&lt;/a&gt;), il est donc souvent nécessaire de passer une ou deux fonctions en paramètre d’un appel, que l'on baptise généralement les &lt;code&gt;callbacks&lt;/code&gt; de succès et d'erreur.&lt;/p&gt;
&lt;p&gt;Lorsque de nombreuses fonctions asynchrones s’enchaînent (comme par exemple plusieurs appels Ajax), on aboutit rapidement à ce qu’on appelle la “pyramide de l’enfer” (ou “Pyramid of Doom”) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;action1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;action2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;action3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;action4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Traitement de v4&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On se rend bien compte que maintenir un tel code est relativement pénible (imaginez ajouter ou supprimer une action).&lt;/p&gt;
&lt;p&gt;Sur le site mappy.com, nous utilisons très régulièrement des enchainements d'appels asynchrones. Un des cas les plus parlants est le calcul d'itinéraire : nous géolocalisons les adresses de départ et d'arrivée, puis nous calculons l'itinéraire avant de l'afficher à l'utilisateur. Ce qui pouvait donner :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;addresses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Paris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lyon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;computeItinerary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itinerary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;displayItinerary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itinerary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;errorCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;errorCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;errorCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;C’est là qu’interviennent les promesses, qui sont une des façons de “remettre à plat” cette pyramide.&lt;/p&gt;
&lt;h1&gt;Les promesses&lt;/h1&gt;
&lt;p&gt;Le terme &lt;code&gt;promise&lt;/code&gt; a été proposé par Daniel Friedman et David Wise en 1976 à travers la conférence « The Impact of Applicative Programming on Multiprocessing » à l’International Conference on Parallel Processing. Les promesses sont à rapprocher des &lt;code&gt;futurs&lt;/code&gt; (&lt;code&gt;futures&lt;/code&gt;) ou &lt;code&gt;délais&lt;/code&gt; (&lt;code&gt;delays&lt;/code&gt;) que l’on retrouve notamment en &lt;code&gt;Dart&lt;/code&gt;, en &lt;code&gt;Python&lt;/code&gt;, en &lt;code&gt;Java&lt;/code&gt; (&lt;code&gt;java.util.concurrent.Future&lt;/code&gt;), en &lt;code&gt;Scala&lt;/code&gt;, &lt;a href="https://en.wikipedia.org/wiki/Futures_and_promises#List_of_implementations"&gt;etc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Avec les promesses, le code présenté en introduction pourrait s’écrire de la sorte :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;action1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Traintement de v4&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;et le code simplifié du calcul d’itinéraire pourrait s’écrire ainsi :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;addresses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Paris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lyon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;computeItinerary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;displayItinerary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Une première approche avec Q&lt;/h1&gt;
&lt;p&gt;Sur le site Mappy, les appels asynchrones ont étés migrés vers des promesses en avril 2013 en utilisant la librairie &lt;a href="https://github.com/kriskowal/q"&gt;Q&lt;/a&gt;.
Parmi les &lt;a href="http://microjs.com/#promise"&gt;multiples alternatives&lt;/a&gt;, nous nous sommes intéressés aux &lt;code&gt;Deferred&lt;/code&gt; de jQuery, notamment car elles étaient déjà incluses sur le site.
Néanmoins, Q a été choisie par rapport aux &lt;code&gt;Deferred&lt;/code&gt; de jQuery principalement pour sa gestion des exceptions plus fine  (plus de &lt;a href="https://github.com/kriskowal/q/wiki/Coming-from-jQuery#exception-handling"&gt;détails sur le site de Q&lt;/a&gt;).
Par ailleurs, les &lt;code&gt;Deferred&lt;/code&gt; de jQuery ne sont pas compatibles avec la spécification &lt;a href="https://promisesaplus.com/"&gt;Promise/A+&lt;/a&gt;, donc sujets à plus de travail en cas de changement de librairie (voici la liste de &lt;a href="https://github.com/promises-aplus/promises-spec/blob/master/implementations.md"&gt;librairie et leur compatibilité face à la spécification&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Si l’on reprend l’exemple simplifié du calcul d’itinéraire précédent, le code s’écrira de la sorte via &lt;code&gt;Q&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Paris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lyon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;computeItinerary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;displayItinerary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Le &lt;code&gt;fail&lt;/code&gt; s’applique à n’importe quelle erreur ayant lieu au sein des fonctions précédemment appelées.&lt;/p&gt;
&lt;p&gt;Voici l’implémentation d’une fonction, par exemple &lt;code&gt;geocode&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;geocode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;deferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// Lancement d’une requête Ajax, etc&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;deferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;coordinates&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;48.856898&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.350843&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="c1"&gt;// et, en cas d’erreur :&lt;/span&gt;
        &lt;span class="c1"&gt;// deferred.reject(&amp;#39;erreur&amp;#39;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;deferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Les méthodes &lt;code&gt;geocode&lt;/code&gt;, &lt;code&gt;computeItinerary&lt;/code&gt; et &lt;code&gt;displayItinerary&lt;/code&gt; renvoient l’attribut &lt;code&gt;promise&lt;/code&gt; d’un objet &lt;code&gt;deferred&lt;/code&gt; renvoyé via un appel à &lt;a href="https://github.com/kriskowal/q#using-deferreds"&gt;&lt;code&gt;Q.defer()&lt;/code&gt;&lt;/a&gt; (aucun rapport avec la librairie de jQuery). En cas de succès, la méthode &lt;code&gt;resolve&lt;/code&gt; de l’objet &lt;code&gt;deferred&lt;/code&gt; sera invoqué et la méthode &lt;code&gt;reject&lt;/code&gt; en cas d’erreur.&lt;/p&gt;
&lt;p&gt;En plus d’être plus lisible, ce code est également optimisé puisque les 2 requêtes de géocodage sont lancées en parallèles via &lt;a href="https://github.com/kriskowal/q#combination"&gt;&lt;code&gt;Q.all&lt;/code&gt;&lt;/a&gt;.
La fonction &lt;code&gt;computeItinerary&lt;/code&gt; consomme les résultats des 2 autres promesses précédentes et retourne une valeur, consommé par la méthode &lt;code&gt;displayItinerary&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Maintenant : les promesses natives&lt;/h1&gt;
&lt;p&gt;Les promesses ont fait leur bonhomme de chemin dans les spécifications d’ECMAScript puisqu’elles font maintenant partie de la version 6 de la norme (ES6).
Cette version commence par ailleurs a être supportée par les principaux navigateurs du marché avec Firefox 31+, Chrome 41+, Opera 28+, Safari 7.1+ et iOS 8 :&lt;/p&gt;
&lt;p&gt;&lt;img alt="support des promesses natives" src="images/javascript/es6-promise-support.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kangax.github.io/compat-table/es6/#Promise"&gt;Table de compatibilité d’ECMAScript 6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pour ces raisons, il nous a semblé intéressant de délaisser la librairie Q au profit des promesses ES6 natives.
Bien sûr, nous utilisons un polyfill (&lt;a href="https://github.com/jakearchibald/es6-promise"&gt;es6-promise&lt;/a&gt;) pour les navigateurs incompatibles, Internet Explorer en tête.
Ce polyfill est un sous-ensemble de &lt;a href="https://github.com/tildeio/rsvp.js"&gt;rsvp.js&lt;/a&gt;, une implémentation plus complète.&lt;/p&gt;
&lt;p&gt;Voici comment on déclarerait la fonction geocode avec une promesse native :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;geocode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Lancement d’une requête Ajax, etc&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;coordinates&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;48.856898&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.350843&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="c1"&gt;// et, en cas d’erreur :&lt;/span&gt;
            &lt;span class="c1"&gt;// reject(&amp;#39;erreur&amp;#39;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;L’intérêt est de retourner immédiatement la promesse. On utilisera la méthode ci-dessus ainsi :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Le &lt;code&gt;catch&lt;/code&gt; est un mot réservé et pose problème sous Internet Explorer, aussi, on préférera cette seconde syntaxe :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vous trouverez des exemples plus concret avec un appel Ajax à travers 2 JsFiddle, le &lt;a href="http://jsfiddle.net/2ve41szc/"&gt;premier&lt;/a&gt; avec l’utilisation du &lt;code&gt;catch&lt;/code&gt;, le &lt;a href="http://jsfiddle.net/2ve41szc/1/"&gt;second&lt;/a&gt; avec la deuxième forme.&lt;/p&gt;
&lt;p&gt;Il est également possible de lancer plusieurs promesses en parallèle (requete1 et requete2 dans cet exemple) via cette syntaxe :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;requete1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;requete2&lt;/span&gt;
&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Une fois les 2 promesses requete1 et requete2 résolues...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nous avons donc, avec notre exemple d'itinéraire habituel :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Paris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lyon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;computeItinerary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;displayItinerary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Et demain ?&lt;/h1&gt;
&lt;p&gt;Les promesses natives avec un polyfill sont sans doute une des approches les plus efficaces pour la gestion de l'asynchrone.&lt;/p&gt;
&lt;p&gt;Cela pourrait néanmoins changer puisqu’une proposition pour ECMAScript 7 (ou ES7) introduit le mot clé &lt;code&gt;await&lt;/code&gt; permettant de résoudre des fonctions asynchrones en les écrivant de façon synchrone :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;itinerary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;paris&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Paris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;lyon&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lyon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;itinerary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;computeItinerary&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;paris&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lyon&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="nx"&gt;displayItinerary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itinerary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notez le mot clé &lt;code&gt;async&lt;/code&gt; en début de fonction, pour signaler que la méthode utilise un &lt;code&gt;await&lt;/code&gt;.
Si vous êtes téméraire, le bout de code ci-dessus est déjà utilisable dans votre code source via l’utilisation d’un transpileur comme &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt; (programme transformant un code ES6 ou ES7 en code ES5, bien plus supporté parmi les navigateurs actuels).
D’ailleurs, si vous souhaitez tenter l’expérience, cet &lt;a href="http://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html"&gt;article (en anglais), sur le blog de pouchdb&lt;/a&gt;, en parle plus en détails.&lt;/p&gt;</content><category term="français"></category><category term="javascript"></category></entry><entry><title>Un plugin Leaflet pour le site Mappy (Leaflet-active-area)</title><link href="https://techblog.mappy.com/leaflet-active-area.html" rel="alternate"></link><published>2015-02-16T00:00:00+01:00</published><updated>2015-02-16T00:00:00+01:00</updated><author><name>Grégory Paul</name></author><id>tag:techblog.mappy.com,2015-02-16:/leaflet-active-area.html</id><summary type="html">&lt;p&gt;Ce plugin leaflet permet de définir une zone utile où seront placés marqueurs et tracés n’occupant qu’une partie de la carte.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Un plugin Leaflet pour le site mappy.com&lt;/h1&gt;
&lt;p&gt;Lors de la mise en place de Leaflet sur mappy.com, (comme présenté dans un &lt;a href="https://techblog.mappy.com/mappy-com-migre-vers-leaflet.html"&gt;billet précédent&lt;/a&gt;), nous avons eu l'occasion de développer un plugin Leaflet, proposé en open-source.&lt;/p&gt;
&lt;h3&gt;Mise en avant de la carte&lt;/h3&gt;
&lt;p&gt;L’un des objectifs de cette nouvelle version fût de mettre en avant la carte dans l’interface, qui n'occupait qu’une petite partie de l’interface de la version précédente. Ainsi, sur les pages de fiche POI ou sur la feuille de route, la carte occupe tout l’écran, du haut en bas de l’écran.&lt;/p&gt;
&lt;p&gt;Cela est surtout visible sur les grandes résolutions, où chaque bord laisse place à la carte comme le témoignent les captures d’écran suivantes :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Itinéraire" src="images/leaflet-active-area/iti.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fr.mappy.com/itineraire/Paris%2075001%20-%2075116/Vincennes%2094300?opt.vehicle=midcar&amp;amp;opt.cost=time&amp;amp;opt.notoll=0&amp;amp;opt.infotraffic=0&amp;amp;opt.gascost=1.558&amp;amp;opt.gas=petrol&amp;amp;opt.compensation=0&amp;amp;routeidx=0"&gt;Feuille de route d’un itinéraire&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fiche POI" src="images/leaflet-active-area/poi.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fr.mappy.com/poi/51f0bde784aebbc34d4a0cc7"&gt;Fiche POI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comme on peut le voir sur les images ci-dessus, et vu que la carte occupe presque tout l’écran, les informations - marqueurs et polyline - ne sont pas centrées. Le centre de la carte correspond au centre de l’écran, caché derrière les éléments HTML.
Cela est plus visible lorsque l’on rend transparents ces éléments HTML comme le montrent les captures suivantes :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Itinéraire avec fond transparent" src="images/leaflet-active-area/iti-transparent.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fr.mappy.com/itineraire/Paris%2075001%20-%2075116/Vincennes%2094300?opt.vehicle=midcar&amp;amp;opt.cost=time&amp;amp;opt.notoll=0&amp;amp;opt.infotraffic=0&amp;amp;opt.gascost=1.558&amp;amp;opt.gas=petrol&amp;amp;opt.compensation=0&amp;amp;routeidx=0"&gt;Feuille de route d’un itinéraire avec fond transparent&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fiche POI avec fond transparent" src="images/leaflet-active-area/poi-transparent.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fr.mappy.com/poi/51f0bde784aebbc34d4a0cc7"&gt;Fiche POI avec fond transparent&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Les appels à l’API Leaflet (centrage de la carte, centrage de la vue en fonction de marqueurs, d’un itinéraire) vont naturellement avoir pour centre de la carte le centre de l’écran si celle-ci en occupe la quasi-totalité.&lt;/p&gt;
&lt;h3&gt;Le plugin Leaflet-active-area&lt;/h3&gt;
&lt;p&gt;Afin de pouvoir afficher des marqueurs ou un itinéraire de façon excentrée, nous avons développé un plugin Leaflet pour abstraire ce comportement.&lt;/p&gt;
&lt;p&gt;Il s’agit du plugin &lt;a href="https://github.com/Mappy/Leaflet-active-area"&gt;Leaflet-active-area&lt;/a&gt; qui, comme le montre la &lt;a href="http://techblog.mappy.com/Leaflet-active-area/examples/index.html"&gt;page d’exemple&lt;/a&gt;, permet d’appeler les méthodes usuelles de Leaflet telles que setView, setZoom, fitBounds tout en "centrant" la carte à partir d’une autre zone.&lt;/p&gt;
&lt;p&gt;Le principe est de définir une classe CSS, positionnée de façon absolue, qui sera prise en compte comme zone active de la carte. Ainsi, le centre de la carte sera le centre de cette zone et l’ensemble des marqueurs ou tracés y seront placés.&lt;/p&gt;
&lt;h3&gt;Disponible sous license Apache 2.0&lt;/h3&gt;
&lt;p&gt;Il nous a paru évident, utilisant une API open-source utilisée et développée par une énorme communité de développeurs, de proposer ce plugin en open-source. Il est disponible sur &lt;a href="https://github.com/Mappy/Leaflet-active-area"&gt;github&lt;/a&gt; et référencé dans &lt;a href="http://leafletjs.com/plugins.html#other-plugins-and-libraries"&gt;“la page des plugins”&lt;/a&gt; du site leaflet.&lt;/p&gt;
&lt;p&gt;A ce jour, nous avons même reçu la contribution de plusieurs développeurs hors Mappy avec l'ouverture - et l'acceptation - de 4 pull requests, la création puis la résolution de plusieurs issues. N'hésitez pas à contribuer !&lt;/p&gt;</content><category term="français"></category><category term="leaflet"></category><category term="opensource"></category><category term="javascript"></category></entry><entry><title>mappy.com migre vers Leaflet</title><link href="https://techblog.mappy.com/mappy-com-migre-vers-leaflet.html" rel="alternate"></link><published>2015-02-04T00:00:00+01:00</published><updated>2015-02-04T00:00:00+01:00</updated><author><name>Grégory Paul</name></author><id>tag:techblog.mappy.com,2015-02-04:/mappy-com-migre-vers-leaflet.html</id><summary type="html">&lt;p&gt;mappy.com utilise dorénavant l’API OpenSource Leaflet plutôt que son API cartographique “maison”.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Nouvelle version du site, nouvelle cartographie&lt;/h1&gt;
&lt;p&gt;En mai 2014, une nouvelle version du site Mappy a vu le jour :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Version 4" src="images/leaflet/hp-v4.png"&gt;&lt;/p&gt;
&lt;p&gt;Précédente version (4)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Version 5" src="images/leaflet/hp-v5.png"&gt;&lt;/p&gt;
&lt;p&gt;Nouvelle version (5)&lt;/p&gt;
&lt;p&gt;Cette version a entraîné bon nombre de refactoring technique (comme un passage à Backbone par exemple) dont le plus impactant fût la décision de remplacer l’API cartographique JavaScript historique par &lt;a href="http://leafletjs.com/"&gt;Leaflet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Leaflet est une API de cartographie JavaScript OpenSource parmi les plus connues et actives. Utilisée par de nombreux sites importants, aussi bien généralistes (Flickr, Foursquare, Pinterest) que spécialistes de la cartographie (Mapbox, OpenStreetMap), elle dispose de plus de 175 contributeurs.&lt;/p&gt;
&lt;h2&gt;La compatibilité de la cartographie Mappy avec Leaflet&lt;/h2&gt;
&lt;p&gt;Notre plateforme cartographique dispose de certaines spécificités par rapport aux standards actuels :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;une projection &lt;a href="http://spatialreference.org/ref/esri/world-gall-stereographic/"&gt;Gall&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;des tuiles de 384 pixels de large (au lieu des 256 généralement utilisés par les autres acteurs cartographique),&lt;/li&gt;
&lt;li&gt;13 niveaux de zoom, avec un facteur 3 entre chaque niveau (au lieu de 20 niveaux et d'un facteur x2).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elles ont été intégrées sous la forme d’un plugin Leaflet, inspiré du plugin &lt;a href="https://www.mapbox.com/developers/api/"&gt;Mapbox&lt;/a&gt;. Ce plugin étend l’API Leaflet et intègre également d’autres méthodes pour effectuer des recherches géographiques, des recherches géographiques inversées (Retrouver une adresse depuis des coordonnées) et enfin des recherches d’itinéraires via les services de Mappy.&lt;/p&gt;
&lt;p&gt;Utilisée aujourd’hui par le site &lt;a href="http://www.mappy.com"&gt;fixe&lt;/a&gt;, le site &lt;a href="http://m.mappy.com"&gt;mobile&lt;/a&gt; et le widget, cette API est également distribuée aux partenaires. Si vous êtes intéressés, je vous invite à consulter &lt;a href="http://corporate.mappy.com/faq/integrez-mappy/"&gt;la page dédiée à intégration de nos services dans vos produits&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Contributions&lt;/h2&gt;
&lt;p&gt;Depuis cette migration à Leaflet, nous avons apporté quelques contributions sous la forme de “&lt;a href="https://github.com/Leaflet/Leaflet/pull/3038"&gt;pull request&lt;/a&gt;” ou de nouveau plugin (&lt;a href="https://github.com/Mappy/Leaflet-active-area"&gt;leaflet-active-area&lt;/a&gt;, un prochain article le présentera en détail).&lt;/p&gt;
&lt;h2&gt;A l’avenir&lt;/h2&gt;
&lt;p&gt;Au final, ce passage à Leaflet ne nous apporte que des avantages et nous avons hâte de proposer d’autres “pull requests” ou plugins.&lt;/p&gt;
&lt;p&gt;Autre avantage à l'utilisation de Leaflet, la migration vers des projections plus standard - un de nos projet 2015 - aura un très faible coût, et aucune migration d'API ne sera nécessaire.&lt;/p&gt;</content><category term="français"></category><category term="leaflet"></category><category term="opensource"></category><category term="javascript"></category></entry><entry><title>PyLR, an OpenLR decoder in python</title><link href="https://techblog.mappy.com/PyLR,%20an%20OpenLR%20decoder%20in%20python.html" rel="alternate"></link><published>2014-12-04T00:00:00+01:00</published><updated>2014-12-04T00:00:00+01:00</updated><author><name>Audrey Malherbe</name></author><id>tag:techblog.mappy.com,2014-12-04:/PyLR, an OpenLR decoder in python.html</id><summary type="html">&lt;p&gt;An Open source python implementation of OpenLR specification.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;PyLR, an OpenLR decoder in python&lt;/h1&gt;
&lt;p&gt;Here, at Mappy, we have decided to release our implementation of the &lt;a href="http://www.openlr.org"&gt;OpenLR&lt;/a&gt; specification.&lt;/p&gt;
&lt;p&gt;To make a story short, OpenLR is an open source  software project launched by TomTom in september 2009. This is an attempt to provide a location referencing method that works between digital maps of different vendors or versions.&lt;/p&gt;
&lt;p&gt;We use traffic informations from 10 countries in Europe in &lt;a href="http://datex2.easyway-its.eu/content/datex"&gt;DATEX&lt;/a&gt; format, location reference was provided using the &lt;a href="https://en.wikipedia.org/wiki/Traffic_message_channel"&gt;TMC&lt;/a&gt; reference system.
The problem with TMC is that the coverage of the road network is relatively less than optimal. Because TomTom was providing information on a larger portion of the road network (in theory, the whole network could be covered) using its OpenLR scheme, we have decided to drop TMC in favor of OpenLR.&lt;/p&gt;
&lt;p&gt;The basics:&lt;/p&gt;
&lt;p&gt;OpenLR data provide paths or that must be "decoded" on the destination network (also called 'map' in the OpenLR terminology) by computing the shortest path between location reference points and a bunch of values representing the physical properties of the network at these points.&lt;/p&gt;
&lt;p&gt;So, what is PyLR ?&lt;/p&gt;
&lt;p&gt;PyLR is a partial Python implementation of the OpenLR specification largely inspired from the reference implementation in Java (available on the OpenLR site).&lt;/p&gt;
&lt;p&gt;It is partial in the sense that only parser/decoder is provided, encoding et serializing OpenLR data is not supported at the moment.&lt;/p&gt;
&lt;p&gt;While still a work in progress, it is actually used in production here at Mappy.
For information, our implementation fail to decode less than 1% of the collected traffic situations, which correspond mostly to mismatched data with our network database.&lt;/p&gt;
&lt;p&gt;PyLR implement a decoder from the binary/base64 data representation (xml is not handled at the moment). It implements also a decoder that use an abstract representationof the targeted map.&lt;/p&gt;
&lt;p&gt;At the moment, PyLR is not really usable out of the box: you still need to implement a concrete database and a shortest path algorithm for playing with the library.&lt;/p&gt;
&lt;p&gt;As stated before, it is a work in progress, we have plan to provide more tools for testing and playing around with the lib: stay tuned !!!!&lt;/p&gt;
&lt;p&gt;PyLR is available on &lt;a href="https://github.com/Mappy/PyLR"&gt;github&lt;/a&gt; and is released under the Apache licence, version 2.&lt;/p&gt;</content><category term="english"></category><category term="openlr"></category><category term="python"></category><category term="opensource"></category></entry><entry><title>Android StreetView-like 360 panorama with OpenGl</title><link href="https://techblog.mappy.com/Android%20StreetView-like%20360%20panorama.html" rel="alternate"></link><published>2014-08-04T00:00:00+02:00</published><updated>2014-08-04T00:00:00+02:00</updated><author><name>Jonathan Baby</name></author><id>tag:techblog.mappy.com,2014-08-04:/Android StreetView-like 360 panorama.html</id><summary type="html">&lt;p&gt;Display StreetView-like panoramas on Android devices, with interactive arrows to move from a view to the next, based on 360 photos with cubic projection.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://mappy.com"&gt;Mappy&lt;/a&gt; offers StreetView-like immersive experience to explore France cities. The web interface uses a &lt;a href="http://fr.mappy.com/#/40/M1/TSearch/Snotre+dame+paris/N42.63223,-2.96266,2.35218,48.85267/Z10/"&gt;Flash player to display the cubic projections of "360" panorama images&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mappy 360 Web player" src="images/mappy_panorama_web_flash_player.png"&gt;&lt;/p&gt;
&lt;p&gt;To provide the same feature on Android devices, we looked at existing solutions. Two we came accross were :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://krpano.com/"&gt;krpano HTML5 Viewer&lt;/a&gt; works in modern mobile browsers (&lt;a href="http://krpano.com/docu/html5/#supportedsystems"&gt;supported browsers, WebViews&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zarelaky/panoramagl-android"&gt;PanoramaGL&lt;/a&gt; Android library handles many projections (spherical, cubic and cylindrical), JSON configuration, transitions, gyroscope and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still, these two did not exactly match our needs :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Wide device support, starting with Android 2.3&lt;/strong&gt;, while &lt;a href="http://krpano.com/docu/html5/#supportedsystems"&gt;krpano&lt;/a&gt; requires latest Android browsers or &lt;code&gt;WebViews&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;StreetView-like gesture control (rotate, zoom)&lt;/strong&gt;, while &lt;a href="https://github.com/zarelaky/panoramagl-android"&gt;PanoramaGL&lt;/a&gt; handles "Pan-Rotate" as a speed vector we felt not as easy to control. It may be configurable but we didn't find out how.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Click on 3D way arrows&lt;/strong&gt;, while PanoramaGL provides hotspots with visual feedback on click. Still, these are 2D bitmap layers inside textures, as far as we understood.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Mappy 360 Web player" src="images/mappy_panorama_android_01.png"&gt;
&lt;img alt="Mappy 360 Web player" src="images/mappy_panorama_android_02.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Available on Google Play, &lt;a href="https://play.google.com/store/apps/details?id=com.mappy.app"&gt;Mappy for Android&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's describe the main technical aspects we implemented building our own &lt;em&gt;PanoramicLib&lt;/em&gt;.&lt;/p&gt;
&lt;h1&gt;Cubic projection&lt;/h1&gt;
&lt;p&gt;To display 360 panoramas with cubic projection, we texture the inner faces of a simple cube mesh (6 square faces, 2 triangles each).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bitmap tile faces layout on a cube" src="images/panoramic_cube_01.png"&gt;
&lt;img alt="Cube faces layout" src="images/panoramic_cube_02.png"&gt;
&lt;img alt="Cube rotation angles names" src="images/panoramic_cube_04.png"&gt;&lt;/p&gt;
&lt;p&gt;In the OpenGL 3D space, both cube and camera center are (x=0, y=0, z=0). The camera rotates on itself, using pitch and yaw angles. This is important because the cubic projected textures are valid only if seen from the cube center. Zoom is done just by changing the Field Of View angle (the cube mesh is not scaled).&lt;/p&gt;
&lt;p&gt;&lt;img alt="*PanoramicLib* sample using &amp;quot;target&amp;quot; textures" src="images/panoramic_cube_05.png"&gt;
&lt;img alt="*PanoramicLib* sample using &amp;quot;target&amp;quot; textures" src="images/panoramic_cube_06.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;PanoramicLib&lt;/em&gt; sample using "target" textures for debugging&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In &lt;em&gt;PanoramicLib&lt;/em&gt; source :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PanoramicGestureListener&lt;/code&gt; class handles scroll and fling gestures to set camera orientation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PanoramicScaleGestureListener&lt;/code&gt; class handles pinch to zoom gesture.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Progressive resolution loading&lt;/h1&gt;
&lt;p&gt;Our panorama images are provided through Web services. For faster loading, low resolution bitmaps (128 * 128) are first downloaded. Higher resolutions are progressively downloaded, updating the cube faces to sharper textures. For high resolutions, faces are divided in multiple tiles of 512 * 512 pixels.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Multiple bitmap tiles per face possibilities" src="images/panoramic_cube_03.png"&gt;&lt;/p&gt;
&lt;p&gt;Ideally, using tiles would lower the amount of downloaded data because client application could :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download tiles only for visible faces,&lt;/li&gt;
&lt;li&gt;Download max resolution tiles only for zoomed parts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;... but we didn't push this far for now.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;PanoramicLib&lt;/em&gt; source, the &lt;code&gt;PanoramicTile&lt;/code&gt; interface is responsible for handling a bitmap tile and a tiny &lt;code&gt;PanoramicTileIdentifier&lt;/code&gt; structure describing which face of the cube the tile belongs. The "split factor" (&lt;code&gt;PanoramicTileIdentifier.getSplitFactor()&lt;/code&gt;) is number of times the face is splitted.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;splitFactor = 0 : 1 tile per face,&lt;/li&gt;
&lt;li&gt;splitFactor = 1 : 4 tiles per face,&lt;/li&gt;
&lt;li&gt;splitFactor = 2 : 16 tiles per face.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;PanoramicTileIdentifier.getPosition()&lt;/code&gt; gives the position of tile inside the face (0 is top-left).&lt;/p&gt;
&lt;p&gt;Tiles can be added any time during cube rendering. The &lt;code&gt;PanoramicCubeMesh&lt;/code&gt; will consider face, splitfactor and position to add the bitmap on to the corresponding texture. A higher split factor is considered as a higher resolution. The cube will adapt to use the tiles with the highest split factor.&lt;/p&gt;
&lt;p&gt;The face splits are not polygons. The cube mesh vertices never changes and  each face always uses only two triangles. The multiple tiles of a face are actually merged in a single texture. While resolution goes up, new texture buffers are allocated and tile bitmaps are progressively drawn inside (using &lt;code&gt;GLUtils.texSubImage2D()&lt;/code&gt;).&lt;/p&gt;
&lt;h1&gt;Interactive elements with ray-picking&lt;/h1&gt;
&lt;p&gt;To provide click-able 3D arrows as in Google StreetView and move from a panorama to a neighbor one, we needed to detect the click. In 3D space.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Picking is the task of determining which screen-rendered object a user has clicked on."&lt;/em&gt; &lt;a href="http://en.wikipedia.org/wiki/Picking"&gt;(Wikipedia)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The idea with ray-picking is to compute a 3D ray between the camera and the point the user clicked. For each polygon in the scene, you test if the ray intersects it, resolving the &lt;a href="http://en.wikipedia.org/wiki/Line%E2%80%93plane_intersection"&gt;"line-plane intersection" equation&lt;/a&gt;. The closest intersected polygon belongs to the clicked object.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ray picking diagram" src="images/ray_picking_01.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Image from &lt;a href="http://oivdoc90.vsg3d.com/content/88-picking"&gt;VSG, Visualization Science Group - Open Inventor Mentor, 2nd Edition - Volume I&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The picking code comes from &lt;a href="https://github.com/i-schuetz/Android_OpenGL_Picking"&gt;Ivan Schuetz "Android OpenGL Picking"&lt;/a&gt; GitHub project.
It refers to &lt;a href="http://android-raypick.blogspot.de/2012/04/first-i-want-to-state-this-is-my-first.html"&gt;Gregory Beauchamp "Ray picking on Android"&lt;/a&gt; article.&lt;/p&gt;
&lt;p&gt;We adaptated the code to take the picking out of the OpenGL thread. In &lt;code&gt;PanoramicLib&lt;/code&gt;, we notify the &lt;code&gt;Activy&lt;/code&gt; on way arrow click to load next panorama view. This has to run on the UI thread.&lt;/p&gt;
&lt;p&gt;In Ivan Schuetz example, ray intersect computing is done in &lt;code&gt;ExampleGLRenderer.onDrawFrame(GL10 gl)&lt;/code&gt; &lt;a href="https://github.com/i-schuetz/Android_OpenGL_Picking/blob/master/glpicking/src/com/example/glpicking/ExampleGLRenderer.java"&gt;(source)&lt;/a&gt;, calling &lt;code&gt;ExampleGLObject.draw(GL10 gl, Ray ray)&lt;/code&gt; on each scene object. Intersections are logged to Android LogCat from there &lt;a href="https://github.com/i-schuetz/Android_OpenGL_Picking/blob/master/glpicking/src/com/example/glpicking/ExampleGLObject.java"&gt;(source)&lt;/a&gt;. It runs on the OpenGL thread because it requires the OpenGL context to grab projection and modelview matrixes to compute ray and projected objects coordinates.&lt;/p&gt;
&lt;p&gt;To handle intersection computing on the UI thread, we saved the current OpenGL matrixes in a member of each &lt;code&gt;ArrowMesh&lt;/code&gt; instance, on each draw, using &lt;code&gt;MatrixGrabber&lt;/code&gt; class &lt;a href="https://github.com/i-schuetz/Android_OpenGL_Picking/blob/master/glpicking/src/com/example/glpicking/MatrixGrabber.java"&gt;(source)&lt;/a&gt;.&lt;/p&gt;</content><category term="english"></category><category term="android"></category><category term="panorama"></category><category term="opengl"></category></entry><entry><title>Super flexible GeoAutoComplete with Solr</title><link href="https://techblog.mappy.com/Super%20flexible%20GeoAutoComplete%20with%20Solr.html" rel="alternate"></link><published>2014-02-25T00:00:00+01:00</published><updated>2014-02-25T00:00:00+01:00</updated><author><name>Jérôme Bernardes</name></author><id>tag:techblog.mappy.com,2014-02-25:/Super flexible GeoAutoComplete with Solr.html</id><summary type="html">&lt;p&gt;How to build an autocompletion service with geographical context using solr&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Super flexible GeoAutoComplete with Solr&lt;/h1&gt;
&lt;p&gt;In an inspiring article &lt;a href="http://www.cominvent.com/2012/01/25/super-flexible-autocomplete-with-solr/"&gt;Cominvent AS&lt;/a&gt; presented us how to use &lt;a href="https://lucene.apache.org/solr/"&gt;Solr&lt;/a&gt; power to implement autocomplete feature. We are going to present you how to add a geographical component to this suggestion.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download and unpack Solr if you have not already &lt;a href="http://www.apache.org/dyn/closer.cgi/lucene/solr/"&gt;http://www.apache.org/dyn/closer.cgi/lucene/solr/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download and unpack &lt;a href="https://techblog.mappy.com/resources/mappy-autocomplete.zip"&gt;mappy-geoautocomplete.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cd to the autocomplete folder, open README.TXT and follow the instructions. When done you will have Solr up and running with the example data indexed into the “acgeo” core.&lt;/li&gt;
&lt;li&gt;When you browse to http://localhost:8000/ and start typing, you will see a map and countries and cities suggested&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As ranking factor, we use a combination of the population of the countries and cities, the textual relevancy and, that is the main point of our article, the proximity to the center of the map we display.
As the use of population and text relevancy has been explained in &lt;a href="http://www.cominvent.com/2012/01/25/super-flexible-autocomplete-with-solr/"&gt;Cominvent As&lt;/a&gt; article, let's focus on the geographical part of the score.
First we need to store the coordinates for each city and country. Thus we add longitude (lng) and latitude (lat) fields in our schema.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lng&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;float&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;indexed=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;stored=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;omitNorms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lat&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;float&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;indexed=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;stored=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;omitNorms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we need to modify solrconfig.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;requestHandler&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;solr.SearchHandler&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;acgeo&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;default=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;lst&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;defaults&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;defType&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;edismax&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;10&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fl&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;*,score&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qf&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;name^30 textng^50.0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pf&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;textnge^50.0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bf&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;product(log(sum(population,1)),100)^20&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Define relative importance between types. May be overridden per request by e.g. &amp;amp;personboost=120 --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;product(product(map(query($type1query),0,0,1,$type1boost),map(query($type2query),0,0,1,$type2boost),map(query($type3query),0,0,1,$type3boost),map(query($type4query),0,0,1,$type4boost),$typeboost), geoboost($eps,$mu,$lat_min,$lng_min,$lat_max,$lng_max,lat,lng))&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;typeboost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1.0&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type1query&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;type:&amp;quot;Countries&amp;quot;&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type1boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.9&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type2query&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;type:&amp;quot;Cities&amp;quot;&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type2boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.5&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type3query&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;type:&amp;quot;NA&amp;quot;&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type3boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.0&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type4query&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;type:&amp;quot;NA&amp;quot;&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;double&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type4boost&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.0&lt;span class="nt"&gt;&amp;lt;/double&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lng_min&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lat_min&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lng_max&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lat_max&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;eps&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.1&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mu&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1.0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;debugQuery&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/requestHandler&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that our Solr is prepared to manage request with coordinates, we obviously have to send it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://localhost:8983/solr/acgeo/select?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;delay&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;dataType&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;jsonp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;term&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;wt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;json.wrf&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;callback&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;lat_min&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBounds&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getSouth&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;lat_max&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBounds&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getNorth&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;lng_min&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBounds&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getWest&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;lng_max&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBounds&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getEast&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even if Solr &lt;a href="http://wiki.apache.org/solr/FunctionQuery"&gt;FunctionQuery&lt;/a&gt; gives us a set of possibility, it may not fit our particular needs. In that case we can easily extend the list of available functions by writing our own in Java. Let's implement a &lt;code&gt;geoboost&lt;/code&gt; function that is equal to &lt;code&gt;1&lt;/code&gt; inside a given bounding box, and that is decreasing until &lt;code&gt;epsilon&lt;/code&gt; outside the bounding box. The decreasing speed is configurable via parameter &lt;code&gt;mu&lt;/code&gt; (A plot of this function is available &lt;a href="https://techblog.mappy.com/images/geoboost.png"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;geoboost(epsilon, mu, lat_min, lng_min, lat_max, lng_max)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have to write a parser (i.e. a class implementing &lt;a href="http://wiki.apache.org/solr/SolrPlugins#ValueSourceParser"&gt;org.apache.solr.search.ValueSourceParser&lt;/a&gt; that reads the value from the left to the right)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GeoBoostValueParser&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ValueSourceParser&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FunctionQParser&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;SyntaxError&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lngmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lngmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseValueSource&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseValueSource&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GeoBoostFunction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;latmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lngmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;latmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lngmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the class that does the real job, where the result is returned by &lt;code&gt;public FunctionValues getValues()&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GeoBoostFunction&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lngmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lngmax&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;GeoBoostFunction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lngmin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;latmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lngmax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ValueSource&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@Override&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;FunctionValues&lt;/span&gt; &lt;span class="nf"&gt;getValues&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AtomicReaderContext&lt;/span&gt; &lt;span class="n"&gt;readerContext&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FloatDocValues&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;@Override&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;floatVal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latvals&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lngvals&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;//class GeoBoostFunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the function and parser are written and compiled, we register the function in the sorlconfig.xml by adding the path to our *.jar and specifying our parser.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;config&amp;gt;&lt;/span&gt;
    ...
    &lt;span class="nt"&gt;&amp;lt;lib&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lib/lbs-geoboost.jar&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;valueSourceParser&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;geoboost&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.mappy.lbs.solr.search.function.GeoBoostValueParser&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/config&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can run and test our configuration.&lt;/p&gt;
&lt;p&gt;Using the default bounding box value (0,0,0,0) &lt;code&gt;http://127.0.0.1:8983/solr/acgeo/select?q=pa&amp;amp;wt=json&amp;amp;&lt;/code&gt; leads to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;numFound&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;docs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pakistan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;São Paulo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paraguay&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Papua New Guinea&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Palestine&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Panama&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Patna&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Palembang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Padang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using a bounding box around Paris &lt;code&gt;http://127.0.0.1:8983/solr/acgeo/select?q=pa&amp;amp;wt=json&amp;amp;lat_min=48&amp;amp;lat_max=48.5&amp;amp;lng_min=2&amp;amp;lng_max=2.5&lt;/code&gt; leads to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;numFound&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;docs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sant Andreu de Palomar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pakistan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Palma&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;São Paulo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paraguay&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Papua New Guinea&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Palestine&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Panama&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Patna&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
             &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="english"></category><category term="solr"></category><category term="GIS"></category><category term="opensource"></category></entry><entry><title>Mappy et Oslandia vers l'OpenSource</title><link href="https://techblog.mappy.com/Mappy%20et%20Oslandia%20vers%20l'OpenSource.html" rel="alternate"></link><published>2014-02-11T00:00:00+01:00</published><updated>2014-02-11T00:00:00+01:00</updated><author><name>Audrey Malherbe</name></author><id>tag:techblog.mappy.com,2014-02-11:/Mappy et Oslandia vers l'OpenSource.html</id><summary type="html">&lt;p&gt;Depuis plus de deux ans, Oslandia accompagne Mappy dans sa transition vers l’OpenSource. La première étape est symbolisée par le projet de migration des bases de données Oracle du backoffice cartographique vers PostGIS.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Paris, le 11 février 2014.&lt;/p&gt;
&lt;p&gt;Depuis plus de deux ans, Oslandia accompagne Mappy dans sa transition vers l’OpenSource. La première étape est symbolisée par le projet de migration des bases de données Oracle du backoffice cartographique vers PostGIS. Celui-ci vient notamment d’être finalisé et fonctionne actuellement en production.&lt;/p&gt;
&lt;p&gt;Mappy propose des services de calcul d’itinéraire et de cartographie. Supportant plusieurs milliards de requêtes par mois, la plateforme LBS (Location Based Services) est au cœur de l’activité de Mappy et sert de socle aux nouveaux produits tel que le Web To Store.&lt;/p&gt;
&lt;p&gt;Oslandia travaille conjointement avec Mappy pour migrer cette plateforme cartographique d’une solution développée en interne, vers une solution basée entièrement sur des logiciels libres, afin de préparer les défis techniques et opérationnels à venir.&lt;/p&gt;
&lt;p&gt;Les backoffices de préparation des données et de création du plan cartographique ont été entièrement migrés avec succès.&lt;/p&gt;
&lt;p&gt;Cette pile applicative était initialement basée sur Oracle Spatial, SQL Server, et des outils internes non standards de création de carte. Elle n’utilise plus désormais que des composants OpenSource.&lt;/p&gt;
&lt;p&gt;Oracle et SQL Server ont été entièrement remplacés par PostgreSQL et PostGIS, qui constitue le socle de base de données géographique pour le stockage et le prétraitement des données géographiques. Mapnik, Python, Tornado, Varnish, MemCached, Debian sont les autres composants OpenSource utilisés.&lt;/p&gt;
&lt;p&gt;La migration vers ces composants OpenSource a permis de rationnaliser et d’optimiser l’architecture du composant « carte »:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Temps de traitement des données réduit&lt;/li&gt;
&lt;li&gt;Standardisation des formats et API&lt;/li&gt;
&lt;li&gt;Forte diminution de la dette technique&lt;/li&gt;
&lt;li&gt;Nombre de lignes de code optimisé&lt;/li&gt;
&lt;li&gt;Baisse du coût de la plateforme, et passage à l’échelle plus économique&lt;/li&gt;
&lt;li&gt;Montée en compétence et motivation des équipes&lt;/li&gt;
&lt;li&gt;Maîtrise complète des outils&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oslandia a permis à Mappy d’intégrer la culture et les méthodes de l’OpenSource dans ses équipes, et leur a fourni les compétences techniques nécessaires pour mettre en place cette architecture à forte charge. Les compétences d’Oslandia en systèmes d’information géographique, et son expertise unique en France sur PostGIS, ont permis de mener à bien ce projet.&lt;/p&gt;
&lt;p&gt;Mappy a ainsi pu bénéficier des dernières technologies OpenSource à la pointe de l’état de l’art, et également pu contribuer à certains projets libres comme Mapnik.&lt;/p&gt;
&lt;p&gt;PostGIS, la base de données géographique supportant toute l’infrastructure, a permis d’atteindre de très hautes performances et un niveau fonctionnel élevé.&lt;/p&gt;
&lt;p&gt;La base de 75Go bénéficie des toutes dernières avancées de PostgreSQL et PostGIS, tels que la réplication au fil de l’eau, les nouvelles fonctions géographiques de PostGIS, les requêtes CTE récursives, le support de JSON et bien plus.&lt;/p&gt;
&lt;p&gt;Audrey Malherbe, responsable du projet chez Mappy, souligne que le choix de PostgreSQL et de PostGIS était une évidence :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;« Nous voulions basculer dans l’OpenSource en nous appuyant sur des technologies performantes et reconnues comme PostGIS. Il était important pour nous de contribuer à l’OpenSource et l’expertise technique d’Oslandia et son implication dans la communauté nous ont permis de nous lancer dans cette aventure en toute confiance. »&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mappy a l’intention de continuer ce virage vers l’OpenSource et d’étendre la méthode de migration aux autres services de la plateforme cartographique.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;À propos de Mappy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spécialiste du calcul d’itinéraire et des services de cartographie, Mappy est reconnu comme le leader français de la recherche locale par la carte, sur Internet, tablettes, mobiles et GPS.&lt;/p&gt;
&lt;p&gt;Mappy propose à ses utilisateurs trois types de recherche : la recherche par le plan, qui permet de visualiser un quartier, de s’immerger dans la ville  grâce aux vues 360° dans 320 villes françaises, mais également de pousser la porte de plusieurs milliers de commerces ; la recherche d’itinéraires disponible pour les déplacements en voiture, en transports en commun, en vélo et en mode piéton ; enfin la recherche de produits, permettant de localiser un produit précis, dans une zone géographique donnée, de connaître son prix et sa disponibilité.&lt;/p&gt;
&lt;p&gt;Acteur majeur du déplacement urbain, Mappy propose aux annonceurs une solution géolocalisée sur l’ensemble du territoire, facilitant les dispositifs web-to-store et la génération de trafic vers leurs points de vente.&lt;/p&gt;
&lt;p&gt;Mappy compte aujourd’hui plus de 10 millions d’utilisateurs mensuels sur Internet, tablettes et mobiles (Mappy et MappyGPS Free).&lt;/p&gt;
&lt;p&gt;Mappy est une filiale à 100% de Solocal Group. &lt;a href="http://www.mappy.com"&gt;http://www.mappy.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;À propos d’Oslandia&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Oslandia est une ENL (Entreprise du Numérique Libre) Française spécialisée en systèmes d’information géographique (SIG) Open Source, et particulièrement en bases de données spatiales, Web Services OGC et SIG bureautiques. Oslandia propose une offre de service complète : conseil, audit, développement, support, formation.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.oslandia.com"&gt;http://www.oslandia.com&lt;/a&gt;&lt;/p&gt;</content><category term="français"></category><category term="mapnik"></category><category term="postGIS"></category><category term="opensource"></category></entry><entry><title>FOSS4G 2013 : Mappy-ing OpenSource</title><link href="https://techblog.mappy.com/FOSS4G%202013%20:%20Mappy-ing%20Open%20Source.html" rel="alternate"></link><published>2013-09-25T00:00:00+02:00</published><updated>2013-09-25T00:00:00+02:00</updated><author><name>Audrey Malherbe</name></author><id>tag:techblog.mappy.com,2013-09-25:/FOSS4G 2013 : Mappy-ing Open Source.html</id><summary type="html">&lt;p&gt;Feedback on the overhaul of the mapping engine of Mappy around Mapnik and PostGIS.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Foss4g2013" src="images/foss4g2013.png"&gt;&lt;/p&gt;
&lt;p&gt;The presentation of our work on map service at &lt;a href="http://2013.foss4g.org/"&gt;Foss4G2013&lt;/a&gt; in Notthingham&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="www.mappy.com"&gt;Mappy&lt;/a&gt; is an online mapping company based in France and fully-owned by Solocal Group (&lt;a href="www.pagesjaunes.fr"&gt;PagesJaunes&lt;/a&gt;). Mappy was the pioneer in online mapping in France, and holds a significant market share in France and Belgium (about 10 millions monthly users). The company has developed an home-made LBS platform since 1998. The mapping service delivers 100 millions tiles a day. At the beginning of 2012, Mappy decided to redesign its core mapping service to meet new business challenges. The company needed a more standard and open source solution. Developers and product managers have fallen in love with &lt;a href="www.mapnik.org"&gt;Mapnik&lt;/a&gt; (some for code and performance, others for the map display quality). The team made the decision to build the new mapping service around Mapnik and others open source tools like PostGIS. The project was challenging : we switched from a MSSqlServer database/home made mapping engine/Windows architecture to a postgis database/mapnik engine/Linux one. During the development, we've seen and appreciated the energy around Mapnik and we started to gradually dive into code and contribute to some features. This talk will present a feedback on the overhaul : the functional and technical challenges, the decision to contribute to Mapnik project, the release of this service, its performance and the future roadmap.&lt;/p&gt;
&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/26407067" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="https://www.slideshare.net/AudreyMalherbe/foss42013-mappying-opensource" title="Foss4G2013 Mappy-ing Open Source" target="_blank"&gt;&lt;/div&gt;&lt;/p&gt;</content><category term="english"></category><category term="mapnik"></category><category term="postGIS"></category><category term="opensource"></category></entry></feed>